{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"ChainMeasureUnitType": {
				"description": "Codebook for type of chain facility",
				"properties": {
					"docType": {
						"type": "string",
						"nullable": true
					},
					"_id": {
						"type": "string",
						"nullable": true
					},
					"_rev": {
						"type": "string",
						"nullable": true
					},
					"dbKey": {
						"type": "string",
						"nullable": true
					},
					"mode__": {
						"type": "string",
						"enum": [
							"insert",
							"insert_as_is",
							"update"
						]
					},
					"id": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"weight": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"underlyingMeasurementUnitTypeId": {
						"type": "string",
						"nullable": true
					},
					"underlyingMeasurementUnitType": {
						"$ref": "#/components/schemas/ChainMeasureUnitType"
					}
				},
				"required": [
					"id",
					"label"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChainFacilityType": {
				"description": "Codebook for type of chain facility",
				"properties": {
					"docType": {
						"type": "string",
						"nullable": true
					},
					"_id": {
						"type": "string",
						"nullable": true
					},
					"_rev": {
						"type": "string",
						"nullable": true
					},
					"dbKey": {
						"type": "string",
						"nullable": true
					},
					"mode__": {
						"type": "string",
						"enum": [
							"insert",
							"insert_as_is",
							"update"
						]
					},
					"id": {
						"type": "string"
					},
					"label": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"label"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChainCountry": {
				"properties": {
					"code": {
						"type": "string",
						"description": "Two letter country code of country (ISO 3166-1 alpha-2 code)."
					},
					"id": {
						"type": "number",
						"format": "double",
						"description": "Db id."
					},
					"name": {
						"type": "string",
						"description": "Country name."
					}
				},
				"required": [
					"code",
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChainLocation": {
				"properties": {
					"address": {
						"type": "string",
						"nullable": true,
						"description": "address"
					},
					"city": {
						"type": "string",
						"nullable": true,
						"description": "city"
					},
					"country": {
						"$ref": "#/components/schemas/ChainCountry",
						"description": "country"
					},
					"state": {
						"type": "string",
						"nullable": true,
						"description": "state / province / region"
					},
					"zip": {
						"type": "string",
						"nullable": true,
						"description": "ZIP / postal code / p.p. box"
					},
					"latitude": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "location latitude"
					},
					"longitude": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "location longitude"
					},
					"site": {
						"type": "string",
						"nullable": true,
						"description": "Custom site coordinate"
					},
					"sector": {
						"type": "string",
						"nullable": true,
						"description": "Custom sector coordinate"
					},
					"cell": {
						"type": "string",
						"nullable": true,
						"description": "Custom cell coordinate"
					},
					"village": {
						"type": "string",
						"nullable": true,
						"description": "Custom village coordinate"
					},
					"isPubliclyVisible": {
						"type": "boolean",
						"nullable": true,
						"description": "Is location publicly visible?"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiCountry": {
				"properties": {
					"code": {
						"type": "string",
						"description": "Two letter country code of country (ISO 3166-1 alpha-2 code)."
					},
					"id": {
						"type": "number",
						"format": "double",
						"description": "Db id."
					},
					"name": {
						"type": "string",
						"description": "Country name."
					}
				},
				"required": [
					"code",
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiAddress": {
				"properties": {
					"address": {
						"type": "string",
						"description": "address"
					},
					"city": {
						"type": "string",
						"description": "city"
					},
					"country": {
						"$ref": "#/components/schemas/ApiCountry"
					},
					"state": {
						"type": "string",
						"description": "state / province / region"
					},
					"zip": {
						"type": "string",
						"description": "ZIP / postal code / p.p. box"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ChainFileInfo": {
				"description": "Represents a document in the system",
				"properties": {
					"docType": {
						"type": "string",
						"nullable": true
					},
					"_id": {
						"type": "string",
						"nullable": true
					},
					"_rev": {
						"type": "string",
						"nullable": true
					},
					"dbKey": {
						"type": "string",
						"nullable": true
					},
					"mode__": {
						"type": "string",
						"enum": [
							"insert",
							"insert_as_is",
							"update"
						]
					},
					"storageKey": {
						"type": "string",
						"description": "Storage key used for access to the actual file."
					},
					"name": {
						"type": "string",
						"description": "File name as uploaded."
					},
					"contentType": {
						"type": "string",
						"description": "Mime/content type"
					},
					"size": {
						"type": "number",
						"format": "double",
						"description": "File size."
					}
				},
				"required": [
					"storageKey",
					"name",
					"contentType",
					"size"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChainOrganization": {
				"description": "Organization is a representative object of a company in af-coffee-app.",
				"properties": {
					"docType": {
						"type": "string",
						"nullable": true
					},
					"_id": {
						"type": "string",
						"nullable": true
					},
					"_rev": {
						"type": "string",
						"nullable": true
					},
					"dbKey": {
						"type": "string",
						"nullable": true
					},
					"mode__": {
						"type": "string",
						"enum": [
							"insert",
							"insert_as_is",
							"update"
						]
					},
					"created": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of creation"
					},
					"lastChange": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of last change"
					},
					"userCreatedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that created the document."
					},
					"userChangedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that changed the document."
					},
					"abbreviation": {
						"type": "string",
						"nullable": true,
						"description": "company abbreviation"
					},
					"about": {
						"type": "string",
						"nullable": true,
						"description": "about the organization"
					},
					"email": {
						"type": "string",
						"nullable": true,
						"description": "email"
					},
					"headquarters": {
						"$ref": "#/components/schemas/ApiAddress"
					},
					"id": {
						"type": "number",
						"format": "double",
						"description": "Entity id"
					},
					"entityType": {
						"type": "string",
						"description": "Type of entity (table in af-coffee app)"
					},
					"logo": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ChainFileInfo"
							}
						],
						"nullable": true,
						"description": "Logo"
					},
					"manager": {
						"type": "string",
						"nullable": true,
						"description": "name of manager / CEO"
					},
					"mediaLinks": {
						"properties": {},
						"additionalProperties": {
							"type": "string"
						},
						"type": "object",
						"nullable": true,
						"description": "social media URL links (Facebook, Instagram, Twitter, YouTube, ...)"
					},
					"name": {
						"type": "string",
						"nullable": true,
						"description": "company name"
					},
					"phone": {
						"type": "string",
						"nullable": true,
						"description": "webpage"
					},
					"webPage": {
						"type": "string",
						"nullable": true,
						"description": "webpage"
					}
				},
				"required": [
					"id",
					"entityType"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChainCompanyProductRole": {
				"properties": {
					"companyId": {
						"type": "number",
						"format": "double"
					},
					"role": {
						"type": "string"
					}
				},
				"required": [
					"companyId",
					"role"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiProductLabelFieldValue": {
				"properties": {
					"name": {
						"type": "string",
						"description": "Field name in Product"
					},
					"section": {
						"type": "string",
						"description": "Section on FE"
					},
					"value": {
						"description": "Field value in Product"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiProductLabelStatusEnum": {
				"type": "string",
				"enum": [
					"UNPUBLISHED",
					"PUBLISHED"
				],
				"description": "All possible values of status."
			},
			"ApiProductLabelValues": {
				"properties": {
					"fields": {
						"items": {
							"$ref": "#/components/schemas/ApiProductLabelFieldValue"
						},
						"type": "array",
						"description": "Fields"
					},
					"id": {
						"type": "number",
						"format": "double",
						"description": "Entity id"
					},
					"productId": {
						"type": "number",
						"format": "double",
						"description": "Product id"
					},
					"status": {
						"$ref": "#/components/schemas/ApiProductLabelStatusEnum",
						"description": "Product label status"
					},
					"title": {
						"type": "string",
						"description": "label title"
					},
					"uuid": {
						"type": "string",
						"description": "Product label uuid (for url)"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiLocation": {
				"properties": {
					"address": {
						"$ref": "#/components/schemas/ApiAddress"
					},
					"latitude": {
						"type": "number",
						"format": "double",
						"description": "location latitude"
					},
					"longitude": {
						"type": "number",
						"format": "double",
						"description": "location longitude"
					},
					"numberOfFarmers": {
						"type": "number",
						"format": "double",
						"description": "number of farmers at this location"
					},
					"pinName": {
						"type": "string",
						"description": "pin (location) name"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiProductOrigin": {
				"properties": {
					"locations": {
						"items": {
							"$ref": "#/components/schemas/ApiLocation"
						},
						"type": "array",
						"description": "origin - farmer location"
					},
					"text": {
						"type": "string",
						"description": "origin - text and quantity input - Briefly describe where the product or its ingredients are produced"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiDocument": {
				"properties": {
					"contentType": {
						"type": "string",
						"description": "content type"
					},
					"id": {
						"type": "number",
						"format": "double",
						"description": "Entity id"
					},
					"name": {
						"type": "string",
						"description": "document (file) name"
					},
					"size": {
						"type": "number",
						"format": "double",
						"description": "size"
					},
					"storageKey": {
						"type": "string",
						"description": "storage key (file on system, s3, ...)."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiProcessDocument": {
				"properties": {
					"description": {
						"type": "string",
						"description": "description of this document"
					},
					"document": {
						"$ref": "#/components/schemas/ApiDocument"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiCertification": {
				"properties": {
					"certificate": {
						"$ref": "#/components/schemas/ApiDocument"
					},
					"description": {
						"type": "string",
						"description": "description of this standard and certification"
					},
					"type": {
						"type": "string"
					},
					"validity": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiProcess": {
				"properties": {
					"codesOfConduct": {
						"type": "string",
						"description": "codes of conduct - Briefly describe your company codes of conduct that your employees"
					},
					"production": {
						"type": "string",
						"description": "production description - Briefly describe your production process"
					},
					"records": {
						"items": {
							"$ref": "#/components/schemas/ApiProcessDocument"
						},
						"type": "array",
						"description": "production records"
					},
					"standards": {
						"items": {
							"$ref": "#/components/schemas/ApiCertification"
						},
						"type": "array",
						"description": "certifications and standards"
					},
					"storage": {
						"type": "string",
						"description": "storage - Briefly describe your storage procedures"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponsibilityFarmerPicture": {
				"properties": {
					"description": {
						"type": "string",
						"description": "description of this picture"
					},
					"document": {
						"$ref": "#/components/schemas/ApiDocument"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponsibility": {
				"properties": {
					"farmer": {
						"type": "string",
						"description": "farmers story - farmer or community"
					},
					"laborPolicies": {
						"type": "string",
						"description": "labor policies - Briefly describe labor policies you have in place in your company"
					},
					"pictures": {
						"items": {
							"$ref": "#/components/schemas/ApiResponsibilityFarmerPicture"
						},
						"type": "array",
						"description": "farmers story - pictures"
					},
					"relationship": {
						"type": "string",
						"description": "storage - Briefly describe your storage procedures"
					},
					"story": {
						"type": "string",
						"description": "farmers story - text"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiSustainability": {
				"properties": {
					"co2Footprint": {
						"type": "string",
						"description": "CO2 footprint - If you have calculated your company CO2 footprint, please add this information"
					},
					"packaging": {
						"type": "string",
						"description": "sustainable packaging - Describe the environmental sustainability of your packaging, max 1000 chars"
					},
					"production": {
						"type": "string",
						"description": "environmentally friendly production, max 1000 chars"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ChainProduct": {
				"description": "Represents general product definition of a product. Example: Coffee Angelique (without specific packaging, quantity, ...)\nIt DOES NOT represent an example of a product unit one can buy (e.g. a type of product unit of 50g coffee bag of brand Angelique)\nIt DOES NOT represent any particular product instance/shippment/bag ... (e.g. A particular 50g bag of brand Anguelique in some facility\nsuch that one can actually get it.)\nIt only represents product description with core properties.\nSellable (orderable) types of a product of this kind are described by the class ChainSemiProduct.\nInstances of semi products are described by ChainStockOrder.",
				"properties": {
					"docType": {
						"type": "string",
						"nullable": true
					},
					"_id": {
						"type": "string",
						"nullable": true
					},
					"_rev": {
						"type": "string",
						"nullable": true
					},
					"dbKey": {
						"type": "string",
						"nullable": true
					},
					"mode__": {
						"type": "string",
						"enum": [
							"insert",
							"insert_as_is",
							"update"
						]
					},
					"created": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of creation"
					},
					"lastChange": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of last change"
					},
					"userCreatedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that created the document."
					},
					"userChangedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that changed the document."
					},
					"id": {
						"type": "number",
						"format": "double",
						"description": "ProductId from afApp database"
					},
					"organizationRoles": {
						"items": {
							"$ref": "#/components/schemas/ChainCompanyProductRole"
						},
						"type": "array",
						"nullable": true,
						"description": "List of roles of companies on the product value chain"
					},
					"companyId": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "af coffie company id"
					},
					"organizationId": {
						"type": "string",
						"description": "Chain organization id matching companyId, set automatically from companyId on read or write."
					},
					"organization": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ChainOrganization"
							}
						],
						"nullable": true,
						"description": "Chain organization matching companyId, set automatically."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"description": "product description"
					},
					"howToUse": {
						"type": "string",
						"nullable": true,
						"description": "how to Use / Recipes - Describe the best way to use the product (e.g. recipes, how to apply the product...)"
					},
					"ingredients": {
						"type": "string",
						"nullable": true,
						"description": "ingredients - list the ingredients in the product and describe their properties"
					},
					"keyMarketsShare": {
						"properties": {},
						"additionalProperties": {
							"type": "number",
							"format": "double"
						},
						"type": "object",
						"nullable": true,
						"description": "Key Markets, market name - share number map"
					},
					"labels": {
						"items": {
							"$ref": "#/components/schemas/ApiProductLabelValues"
						},
						"type": "array",
						"description": "labels"
					},
					"name": {
						"type": "string",
						"nullable": true,
						"description": "product name"
					},
					"nutritionalValue": {
						"type": "string",
						"nullable": true,
						"description": "nutritional Value - list the nutritional value of the product"
					},
					"origin": {
						"$ref": "#/components/schemas/ApiProductOrigin"
					},
					"photo": {
						"$ref": "#/components/schemas/ApiDocument"
					},
					"process": {
						"$ref": "#/components/schemas/ApiProcess"
					},
					"responsibility": {
						"$ref": "#/components/schemas/ApiResponsibility"
					},
					"sustainability": {
						"$ref": "#/components/schemas/ApiSustainability"
					}
				},
				"required": [
					"id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChainSemiProduct": {
				"description": "Represents a product definition of a product of some organization (ChainOrganization).\nIt DOES NOT represent any praticular product instance/shippment/bag ...\nIt only represents product description with core properties.\nProduct instances are denoted by class ChainProductItem.",
				"properties": {
					"docType": {
						"type": "string",
						"nullable": true
					},
					"_id": {
						"type": "string",
						"nullable": true
					},
					"_rev": {
						"type": "string",
						"nullable": true
					},
					"dbKey": {
						"type": "string",
						"nullable": true
					},
					"mode__": {
						"type": "string",
						"enum": [
							"insert",
							"insert_as_is",
							"update"
						]
					},
					"created": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of creation"
					},
					"lastChange": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of last change"
					},
					"userCreatedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that created the document."
					},
					"userChangedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that changed the document."
					},
					"productId": {
						"type": "string",
						"description": "id reference of the relevant ChainProduct"
					},
					"name": {
						"type": "string",
						"description": "Name of the semi product"
					},
					"description": {
						"type": "string",
						"description": "Description of the semi product"
					},
					"measurementUnitType": {
						"$ref": "#/components/schemas/ChainMeasureUnitType",
						"description": "Type of a measurement unit for quantity of the product (used for stock orders of this product)"
					},
					"isSKU": {
						"type": "boolean",
						"nullable": true,
						"description": "Whether the product is considered as Stock keeping unit (at producer)"
					},
					"isBuyable": {
						"type": "boolean",
						"nullable": true,
						"description": "Whether the product is buyable"
					},
					"isSKUEndCustomer": {
						"type": "boolean",
						"nullable": true,
						"description": "Whether the product is considered as Stock keeping unit (for end customer)"
					},
					"product": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ChainProduct"
							}
						],
						"nullable": true,
						"description": "Product object. Set automatically on read. Ignored on write (not stored, obtained through productId)"
					}
				},
				"required": [
					"productId",
					"name",
					"description"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChainSemiProductPrice": {
				"properties": {
					"semiProductId": {
						"type": "string"
					},
					"price": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"currency": {
						"type": "string"
					}
				},
				"required": [
					"semiProductId",
					"price",
					"currency"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChainFacility": {
				"description": "Each organization (ChainOrganization) may have several facilities. Facility is considered as a storage space for\nproduct units (ChainProductUnit). Transactions (ChainTransaction) run between facilities and are recorded by\nChainTransaciton objects.",
				"properties": {
					"docType": {
						"type": "string",
						"nullable": true
					},
					"_id": {
						"type": "string",
						"nullable": true
					},
					"_rev": {
						"type": "string",
						"nullable": true
					},
					"dbKey": {
						"type": "string",
						"nullable": true
					},
					"mode__": {
						"type": "string",
						"enum": [
							"insert",
							"insert_as_is",
							"update"
						]
					},
					"created": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of creation"
					},
					"lastChange": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of last change"
					},
					"userCreatedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that created the document."
					},
					"userChangedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that changed the document."
					},
					"name": {
						"type": "string",
						"description": "Facility name"
					},
					"organizationId": {
						"type": "string",
						"description": "Organization id"
					},
					"facilityType": {
						"$ref": "#/components/schemas/ChainFacilityType",
						"description": "Role of the facility in the value chain"
					},
					"isCollectionFacility": {
						"type": "boolean",
						"description": "Facility where cherries are gathered"
					},
					"isPublic": {
						"type": "boolean",
						"nullable": true,
						"description": "Whether anybody can list stock orders from this facility (facility intended for sale)."
					},
					"location": {
						"$ref": "#/components/schemas/ChainLocation",
						"description": "Facility location"
					},
					"organization": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ChainOrganization"
							}
						],
						"nullable": true,
						"description": "Organization object. Set automatically on read. Ignored on write (not stored, obtained through organizationId)"
					},
					"semiProducts": {
						"items": {
							"$ref": "#/components/schemas/ChainSemiProduct"
						},
						"type": "array",
						"description": "Allowable semi products"
					},
					"semiProductIds": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Allowable semi product ids"
					},
					"semiProductPrices": {
						"items": {
							"$ref": "#/components/schemas/ChainSemiProductPrice"
						},
						"type": "array",
						"description": "Suggested semi-product prices"
					}
				},
				"required": [
					"name",
					"organizationId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChainCertification": {
				"properties": {
					"docType": {
						"type": "string",
						"nullable": true
					},
					"_id": {
						"type": "string",
						"nullable": true
					},
					"_rev": {
						"type": "string",
						"nullable": true
					},
					"dbKey": {
						"type": "string",
						"nullable": true
					},
					"mode__": {
						"type": "string",
						"enum": [
							"insert",
							"insert_as_is",
							"update"
						]
					},
					"created": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of creation"
					},
					"lastChange": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of last change"
					},
					"userCreatedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that created the document."
					},
					"userChangedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that changed the document."
					},
					"certificate": {
						"$ref": "#/components/schemas/ApiDocument"
					},
					"description": {
						"type": "string",
						"description": "description of this standard and certification"
					},
					"type": {
						"type": "string",
						"description": "certification type"
					},
					"validity": {
						"type": "string",
						"description": "validity"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"FieldDefinition": {
				"description": "Definition of an entry field",
				"properties": {
					"label": {
						"type": "string",
						"description": "Label of an entry field"
					},
					"type": {
						"type": "string",
						"enum": [
							"string",
							"text",
							"number",
							"integer",
							"date",
							"object",
							"array",
							"price",
							"exchange_rate",
							"timestamp",
							"file"
						],
						"description": "Field type (data taype)"
					},
					"required": {
						"type": "boolean",
						"description": "Field is required or not"
					},
					"mandatory": {
						"type": "boolean",
						"description": "Field is mandatory for creation."
					},
					"requiredOnQuote": {
						"type": "boolean",
						"description": "Field is required if related to quote order."
					},
					"stringValue": {
						"type": "string",
						"description": "String value of the field, if the type is 'text', 'date' or 'timestamp'"
					},
					"numericValue": {
						"type": "number",
						"format": "double",
						"description": "Numeric value if the type is 'number'"
					},
					"objectValue": {
						"description": "Object value for type 'object'"
					},
					"fileMultiplicity": {
						"anyOf": [
							{
								"type": "number",
								"format": "double"
							},
							{
								"type": "string",
								"enum": [
									"any"
								]
							}
						],
						"description": "Number of files if the type is 'file'. For unlimited number use 'any'."
					},
					"files": {
						"items": {
							"$ref": "#/components/schemas/ChainFileInfo"
						},
						"type": "array",
						"description": "List of files (ChainFileInfo)"
					}
				},
				"required": [
					"label",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ScoreImpact": {
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"PROVENANCE",
							"FAIRNESS",
							"QUALITY",
							"ORDER",
							"PAYMENT"
						],
						"description": "Type of score"
					},
					"score": {
						"type": "number",
						"format": "double",
						"description": "Score weight"
					}
				},
				"required": [
					"type",
					"score"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChainDocumentRequirement": {
				"description": "Description of the document requirements for an order.",
				"properties": {
					"docType": {
						"type": "string",
						"nullable": true
					},
					"_id": {
						"type": "string",
						"nullable": true
					},
					"_rev": {
						"type": "string",
						"nullable": true
					},
					"dbKey": {
						"type": "string",
						"nullable": true
					},
					"mode__": {
						"type": "string",
						"enum": [
							"insert",
							"insert_as_is",
							"update"
						]
					},
					"name": {
						"type": "string",
						"description": "Document name (label)"
					},
					"description": {
						"type": "string",
						"description": "Description of the document requirement."
					},
					"documentIdentifier": {
						"type": "string",
						"description": "Document identifier (type). Used to identify particular type of document and for matching."
					},
					"fields": {
						"items": {
							"$ref": "#/components/schemas/FieldDefinition"
						},
						"type": "array",
						"description": "List of field definition. Order is important."
					},
					"score": {
						"items": {
							"$ref": "#/components/schemas/ScoreImpact"
						},
						"type": "array",
						"description": "score"
					},
					"required": {
						"type": "boolean",
						"description": "Whether the document is required (critical)"
					}
				},
				"required": [
					"name",
					"description",
					"documentIdentifier",
					"fields",
					"score"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ScoreTargets": {
				"description": "Defines score targets for an order. Typically an integer counting amount of documents.",
				"properties": {
					"fairness": {
						"type": "number",
						"format": "double",
						"description": "Fairness target score"
					},
					"provenance": {
						"type": "number",
						"format": "double",
						"description": "Provenance target score"
					},
					"quality": {
						"type": "number",
						"format": "double",
						"description": "Quality target score"
					},
					"qualityLevel": {
						"type": "string",
						"description": "Quality level (e.g. A+) - TBD enum"
					},
					"womenShare": {
						"type": "number",
						"format": "double",
						"description": "Required share of women's coffee (0 - 1)."
					},
					"order": {
						"type": "number",
						"format": "double",
						"description": "Order target score"
					},
					"payment": {
						"type": "number",
						"format": "double",
						"description": "Payment target score"
					}
				},
				"required": [
					"fairness",
					"provenance",
					"quality",
					"qualityLevel",
					"womenShare",
					"order",
					"payment"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChainDocumentRequirementList": {
				"properties": {
					"identifier": {
						"type": "string",
						"description": "Identifier for document requirement (defining type)"
					},
					"semiProductId": {
						"type": "string",
						"description": "Semi product for which document requirement list is relevant."
					},
					"requirements": {
						"items": {
							"$ref": "#/components/schemas/ChainDocumentRequirement"
						},
						"type": "array",
						"description": "List of document requirements"
					},
					"targets": {
						"$ref": "#/components/schemas/ScoreTargets",
						"description": "Document requrement targets"
					}
				},
				"required": [
					"identifier",
					"requirements",
					"targets"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChainActionType": {
				"description": "Codebook for action type",
				"properties": {
					"docType": {
						"type": "string",
						"nullable": true
					},
					"_id": {
						"type": "string",
						"nullable": true
					},
					"_rev": {
						"type": "string",
						"nullable": true
					},
					"dbKey": {
						"type": "string",
						"nullable": true
					},
					"mode__": {
						"type": "string",
						"enum": [
							"insert",
							"insert_as_is",
							"update"
						]
					},
					"id": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"facilityId": {
						"type": "string"
					},
					"facilityType": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"label"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ContactInfo": {
				"properties": {
					"phone": {
						"type": "string",
						"description": "Phone number"
					},
					"email": {
						"type": "string",
						"description": "Email"
					},
					"hasSmartPhone": {
						"type": "boolean",
						"description": "Whether a contact has a smart phone."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"FarmInfo": {
				"description": "Describes some data about a farm of a customer.",
				"properties": {
					"ownsFarm": {
						"type": "boolean",
						"description": "Whether a user customer owns a farm."
					},
					"farmSize": {
						"type": "string",
						"description": "Farm size"
					},
					"numberOfTrees": {
						"type": "number",
						"format": "double",
						"description": "Number of trees"
					},
					"organicFarm": {
						"type": "boolean",
						"description": "True if it is an organic farm"
					},
					"fertilizerDescription": {
						"type": "string",
						"description": "Fertilizer used description."
					},
					"additionalInfo": {
						"type": "string",
						"description": "Any additional info."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ChainUserCustomerRole": {
				"properties": {
					"organizationId": {
						"type": "string"
					},
					"role": {
						"type": "string"
					}
				},
				"required": [
					"organizationId",
					"role"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BankAccountInfo": {
				"properties": {
					"accountHoldersName": {
						"type": "string",
						"description": "Bank account holder's name"
					},
					"accountNumber": {
						"type": "string",
						"description": "Bank account number"
					},
					"bankName": {
						"type": "string",
						"description": "Bank name"
					},
					"branchAddress": {
						"type": "string",
						"description": "Bank's branch address"
					},
					"country": {
						"$ref": "#/components/schemas/ApiCountry",
						"description": "Country code."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ChainUserCustomer": {
				"description": "User (physical person) type customer",
				"properties": {
					"docType": {
						"type": "string",
						"nullable": true
					},
					"_id": {
						"type": "string",
						"nullable": true
					},
					"_rev": {
						"type": "string",
						"nullable": true
					},
					"dbKey": {
						"type": "string",
						"nullable": true
					},
					"mode__": {
						"type": "string",
						"enum": [
							"insert",
							"insert_as_is",
							"update"
						]
					},
					"created": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of creation"
					},
					"lastChange": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of last change"
					},
					"userCreatedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that created the document."
					},
					"userChangedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that changed the document."
					},
					"id": {
						"type": "number",
						"format": "double",
						"description": "Customer id from af-coffee-ap database"
					},
					"productId": {
						"type": "number",
						"format": "double",
						"description": "Product Id as in af-coffee database"
					},
					"chainProductId": {
						"type": "string",
						"description": "Product id in chain database. If productId is given and organization with such id is in the database, then organizationId is ignored and set automatically.;"
					},
					"companyId": {
						"type": "number",
						"format": "double",
						"description": "Company Id as in af-coffee database"
					},
					"organizationId": {
						"type": "string",
						"description": "Organization id. If companyId is given and organization with such id is in the database, then organizationId is ignored and set automatically.;"
					},
					"name": {
						"type": "string",
						"description": "Name of the customer."
					},
					"surname": {
						"type": "string",
						"description": "Surname of the customer;"
					},
					"gender": {
						"type": "string",
						"enum": [
							"MALE",
							"FEMALE",
							"OTHER"
						],
						"description": "Gender of the customer"
					},
					"location": {
						"$ref": "#/components/schemas/ChainLocation",
						"description": "Location of the user as a customer. Typicaly a production location or location of a farm."
					},
					"customerId": {
						"type": "string",
						"description": "Human readable customer identificator"
					},
					"contact": {
						"$ref": "#/components/schemas/ContactInfo",
						"description": "Customer contact."
					},
					"farmInfo": {
						"$ref": "#/components/schemas/FarmInfo",
						"description": "Some info about a farm."
					},
					"associationIds": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "List of references to associations."
					},
					"cooperativeIdsAndRoles": {
						"items": {
							"$ref": "#/components/schemas/ChainUserCustomerRole"
						},
						"type": "array",
						"description": "List of references to cooperatives (producers) and their roles"
					},
					"bankAccountInfo": {
						"$ref": "#/components/schemas/BankAccountInfo",
						"description": "Some info about bank account"
					},
					"organization": {
						"$ref": "#/components/schemas/ChainOrganization",
						"description": "Organization for organizationId"
					},
					"userCustomerId": {
						"type": "string",
						"description": "UserCustomer id - FARXXXX"
					}
				},
				"required": [
					"id",
					"productId",
					"companyId",
					"surname",
					"gender"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChainGradeAbbreviation": {
				"description": "Codebook for grade abbreviation",
				"properties": {
					"docType": {
						"type": "string",
						"nullable": true
					},
					"_id": {
						"type": "string",
						"nullable": true
					},
					"_rev": {
						"type": "string",
						"nullable": true
					},
					"dbKey": {
						"type": "string",
						"nullable": true
					},
					"mode__": {
						"type": "string",
						"enum": [
							"insert",
							"insert_as_is",
							"update"
						]
					},
					"id": {
						"type": "string"
					},
					"label": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"label"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChainStockOrder": {
				"description": "Represents a product instance (package, bag, container, drying bed, etc.) of a product defined by ChainProduct.\nProduct unit is located on one facility only. It is measured by some quantity units (unitType) and\nby the number totalQuantity. Ti has official production date (productionDate) and expiry date (expiryDate)\nA product unit may be represented by a label in FE.\n\nProduct unit can be created from nothing (e.g. picking the coffee).\nIn general product unit is created by some transactions (ChainTransaction). Product unit does not\nchange its facility. Instead a product unit is transformed by a list of transactions (Chain)\nto different product unit either in the same facility or in some other facility.",
				"properties": {
					"docType": {
						"type": "string",
						"nullable": true
					},
					"_id": {
						"type": "string",
						"nullable": true
					},
					"_rev": {
						"type": "string",
						"nullable": true
					},
					"dbKey": {
						"type": "string",
						"nullable": true
					},
					"mode__": {
						"type": "string",
						"enum": [
							"insert",
							"insert_as_is",
							"update"
						]
					},
					"created": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of creation"
					},
					"lastChange": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of last change"
					},
					"userCreatedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that created the document."
					},
					"userChangedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that changed the document."
					},
					"formalCreationTime": {
						"type": "string",
						"nullable": true,
						"description": "Official creation date/time"
					},
					"identifier": {
						"type": "string",
						"nullable": true,
						"description": "Human readable identifier"
					},
					"creatorId": {
						"type": "string",
						"nullable": true,
						"description": "Id of the user creator"
					},
					"representativeOfProducerUserCustomerId": {
						"type": "string",
						"nullable": true,
						"description": "Representative of producer user customer. E.g. collector. Relevant only for order type: PURCHASE_ORDER"
					},
					"producerUserCustomerId": {
						"type": "string",
						"nullable": true,
						"description": "Id of the person who has produced the entry. Relevant only for order type: PURCHASE_ORDER"
					},
					"productionLocation": {
						"$ref": "#/components/schemas/ChainLocation",
						"description": "Location of the production. Relevant only for order type: PURCHASE_ORDER"
					},
					"certificates": {
						"items": {
							"$ref": "#/components/schemas/ChainCertification"
						},
						"type": "array",
						"nullable": true
					},
					"consumerCompanyCustomerId": {
						"type": "string",
						"nullable": true,
						"description": "Consumer company customer. Relevant for order type: SALES_ORDER"
					},
					"semiProductId": {
						"type": "string",
						"description": "Reference to the semi product"
					},
					"facilityId": {
						"type": "string",
						"description": "Facility Id where product unit is located"
					},
					"organizationId": {
						"type": "string",
						"description": "Calculated from facility during insert."
					},
					"measurementUnitType": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ChainMeasureUnitType"
							}
						],
						"nullable": true,
						"description": "Quantity unit tipe. Calculated automatically from semiProduct at insertion."
					},
					"totalQuantity": {
						"type": "number",
						"format": "double",
						"description": "Total ordered quantity"
					},
					"fullfilledQuantity": {
						"type": "number",
						"format": "double",
						"description": "Fulfilled quantity (<= totalQuantity)"
					},
					"availableQuantity": {
						"type": "number",
						"format": "double",
						"description": "Available quantity ( <= fulfilledQuantity)"
					},
					"isAvailable": {
						"type": "string",
						"enum": [
							"0",
							"1"
						],
						"nullable": true,
						"description": "'1' if availableQuantity > 0. Set automatically."
					},
					"productionDate": {
						"type": "string",
						"description": "Production date"
					},
					"expiryDate": {
						"type": "string",
						"nullable": true,
						"description": "Expiry date"
					},
					"estimatedDeliveryDate": {
						"type": "string",
						"nullable": true,
						"description": "Estimated delivery date"
					},
					"deliveryTime": {
						"type": "string",
						"nullable": true,
						"description": "Preferred delivery date."
					},
					"orderId": {
						"type": "string",
						"nullable": true,
						"description": "Order which triggered creation of the product unit"
					},
					"globalOrderId": {
						"type": "string",
						"nullable": true,
						"description": "Global order id. Global order is initial order that triggers other orders in value chain."
					},
					"documentRequirements": {
						"$ref": "#/components/schemas/ChainDocumentRequirementList",
						"description": "List of document requrements."
					},
					"pricePerUnit": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Price per unit (purchase price). Relevant for type PURCHASE_ORDER. Irrelevant for PROCESSING_ORDER.\nShould be calculated from input transactions for SALES_ORDER and GENERAL_ORDER"
					},
					"salesPricePerUnit": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Sales price per unit."
					},
					"currency": {
						"type": "string",
						"nullable": true,
						"description": "Purchase currency. Currency code according to ISO 4217 for pricePerUnit.\nRelevant for all orders. In case of order type SALES_ORDER it denotes the price\nof sale to the final customer."
					},
					"salesCurrency": {
						"type": "string",
						"nullable": true,
						"description": "Sales currency. Currency code according to ISO 4217 for pricePerUnit"
					},
					"isPurchaseOrder": {
						"type": "boolean",
						"nullable": true,
						"description": "Is it a purchase order? Depricated, should use orderType: PURCHASE_ORDER"
					},
					"orderType": {
						"type": "string",
						"enum": [
							"PURCHASE_ORDER",
							"PROCESSING_ORDER",
							"SALES_ORDER",
							"GENERAL_ORDER",
							"TRANSFER_ORDER"
						],
						"description": "Order type.\n- PURCHASE_ORDER - created during purchase of coffee from farmers. No input transactions, allows output transactions.\n- PROCESSING_ORDER - created as a result of a processing transaction. No input transactions, allows output transactions.\n- SALES_ORDER - created on behalf of final customer. Filled by input transactions. No output transactions allowed.\n- GENERAL - general (transport) order in the middle of the value chain. Allows input and output transactions.\n- TRANSFER ORDER - generated through transfer processing actions"
					},
					"gradeAbbreviationId": {
						"type": "string",
						"description": "Grade abbreviaton id"
					},
					"internalLotNumber": {
						"type": "string",
						"nullable": true,
						"description": "Internal lot number"
					},
					"lotNumber": {
						"type": "string",
						"nullable": true,
						"description": "External lot number"
					},
					"screenSize": {
						"type": "string",
						"nullable": true,
						"description": "Screen size"
					},
					"comments": {
						"type": "string",
						"nullable": true,
						"description": "Comments"
					},
					"actionType": {
						"$ref": "#/components/schemas/ChainActionType",
						"description": "ActionType"
					},
					"womenShare": {
						"type": "number",
						"format": "double",
						"description": "Share between 0 and 1 (100%)"
					},
					"cost": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Cost (to be paid, calculated automatically)"
					},
					"paid": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Amount paid (calculated automatically)"
					},
					"balance": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Balance to be paid (calculated automatically)"
					},
					"semiProduct": {
						"$ref": "#/components/schemas/ChainSemiProduct",
						"description": "Semi-product object. Set automatically on read. Ignored on write (not stored, obtained through semiProductId)"
					},
					"facility": {
						"$ref": "#/components/schemas/ChainFacility",
						"description": "Facility object. Set automatically on read. Ignored on write (not stored, obtained through facilityId)"
					},
					"representativeOfProducerUserCustomer": {
						"$ref": "#/components/schemas/ChainUserCustomer",
						"description": "Representative of producer user customer. Not saved. Used for setting id."
					},
					"producerUserCustomer": {
						"$ref": "#/components/schemas/ChainUserCustomer",
						"description": "User customer. Not saved. Used for setting id."
					},
					"inputTransactions": {
						"items": {
							"$ref": "#/components/schemas/ChainTransaction"
						},
						"type": "array",
						"description": "Input transactions for stock order. Read only."
					},
					"outputTransactions": {
						"items": {
							"$ref": "#/components/schemas/ChainTransaction"
						},
						"type": "array",
						"description": "Output transactions for stock order. Read only."
					},
					"lotLabel": {
						"type": "string",
						"nullable": true,
						"description": "Lot label"
					},
					"startOfDrying": {
						"type": "string",
						"nullable": true,
						"description": "Start of drying"
					},
					"clientId": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Client's name (ID) TODO: add foreign key, when ApiProductCompany is defined"
					},
					"flavourProfile": {
						"type": "string",
						"nullable": true,
						"description": "Flavour profile"
					},
					"processingActionId": {
						"type": "string",
						"description": "Processing action id. The order cannot be deleted directly through API, if this is not null."
					},
					"processingAction": {
						"$ref": "#/components/schemas/ChainProcessingAction",
						"description": "Processing action. Read only."
					},
					"gradeAbbreviation": {
						"$ref": "#/components/schemas/ChainGradeAbbreviation",
						"description": "Grade abbreviaton readOnly"
					},
					"processingOrderId": {
						"type": "string",
						"description": "Reference to processing order"
					},
					"processingOrder": {
						"$ref": "#/components/schemas/ChainProcessingOrder",
						"description": "Processing order. Read only."
					},
					"preferredWayOfPayment": {
						"type": "string",
						"enum": [
							"CASH_VIA_COOPERATIVE",
							"CASH_VIA_COLLECTOR",
							"BANK_TRANSFER",
							"UNKNOWN"
						]
					},
					"consumerCompanyCustomer": {
						"$ref": "#/components/schemas/ChainCompanyCustomer",
						"description": "Consumer company customer. Relevant for order type: SALES_ORDER"
					},
					"client": {
						"$ref": "#/components/schemas/ChainOrganization"
					},
					"sacNumber": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Sac number. Relevant when outputs repacked"
					},
					"triggerOrderIds": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Id of the quote order that triggered the this order"
					},
					"isOpenOrder": {
						"type": "string",
						"enum": [
							"0",
							"1"
						],
						"nullable": true,
						"description": "Calculated property, depending on whether total quantity differs from fullfiled quantity."
					},
					"quoteFacilityId": {
						"type": "string",
						"description": "Quote facility - the facility to which a quote is made"
					},
					"quoteOrganizationId": {
						"type": "string",
						"description": "Quote organization id. Set automatically from quoteFacilityId while saving."
					},
					"inputOrders": {
						"items": {
							"$ref": "#/components/schemas/ChainStockOrder"
						},
						"type": "array",
						"description": "Input orders"
					},
					"pricePerUnitForOwner": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"pricePerUnitForBuyer": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"exchangeRateAtBuyer": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"pricePerUnitForEndCustomer": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"exchangeRateAtEndCustomer": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"cuppingResult": {
						"type": "string",
						"nullable": true
					},
					"cuppingGrade": {
						"type": "string",
						"nullable": true
					},
					"cuppingFlavour": {
						"type": "string",
						"nullable": true
					},
					"roastingDate": {
						"type": "string",
						"nullable": true
					},
					"roastingProfile": {
						"type": "string",
						"nullable": true
					},
					"shipperDetails": {
						"type": "string",
						"nullable": true
					},
					"carrierDetails": {
						"type": "string",
						"nullable": true
					},
					"portOfLoading": {
						"type": "string",
						"nullable": true
					},
					"portOfDischarge": {
						"type": "string",
						"nullable": true
					},
					"locationOfEndDelivery": {
						"type": "string",
						"nullable": true
					},
					"dateOfEndDelivery": {
						"type": "string",
						"nullable": true
					},
					"requiredWomensCoffee": {
						"type": "boolean"
					},
					"requiredQuality": {
						"$ref": "#/components/schemas/ChainGradeAbbreviation"
					},
					"requiredQualityId": {
						"type": "string"
					},
					"shippedAtDateFromOriginPort": {
						"type": "string",
						"nullable": true
					},
					"arrivedAtDateToDestinationPort": {
						"type": "string",
						"nullable": true
					},
					"productOrder": {
						"$ref": "#/components/schemas/ChainProductOrder",
						"description": "Product order matching orderId. Read only."
					},
					"triggerOrders": {
						"items": {
							"$ref": "#/components/schemas/ChainStockOrder"
						},
						"type": "array",
						"description": "Product order matching triggerOrderId. Read only."
					},
					"triggeredOrders": {
						"items": {
							"$ref": "#/components/schemas/ChainStockOrder"
						},
						"type": "array",
						"description": "List of orders that have been trigerred by this order. Read only"
					},
					"quoteFacility": {
						"$ref": "#/components/schemas/ChainFacility"
					},
					"quoteOrganization": {
						"$ref": "#/components/schemas/ChainOrganization"
					},
					"organization": {
						"$ref": "#/components/schemas/ChainOrganization",
						"description": "Read only organization."
					}
				},
				"required": [
					"semiProductId",
					"facilityId",
					"totalQuantity",
					"fullfilledQuantity",
					"availableQuantity",
					"productionDate"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChainTransaction": {
				"description": "Represents a chain value transaction between product units. Essentialy a transaction\ndenotes taking some quantity of a source product unit (sourceProductUnitid) and transferring it to some\ntarget product unit (targetProductUnitId), where the product units are necessary different.\nProduct units can be in the same facility (e.g. processing) or in different ones (e.g. transporations).\nExact business operation is denoted by actionOrShippment",
				"properties": {
					"docType": {
						"type": "string",
						"nullable": true
					},
					"_id": {
						"type": "string",
						"nullable": true
					},
					"_rev": {
						"type": "string",
						"nullable": true
					},
					"dbKey": {
						"type": "string",
						"nullable": true
					},
					"mode__": {
						"type": "string",
						"enum": [
							"insert",
							"insert_as_is",
							"update"
						]
					},
					"created": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of creation"
					},
					"lastChange": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of last change"
					},
					"userCreatedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that created the document."
					},
					"userChangedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that changed the document."
					},
					"organizationId": {
						"type": "string",
						"description": "OrganizationId"
					},
					"initiatorUserId": {
						"type": "string",
						"description": "Transaction initiator (user), userId from af-coffee-ap"
					},
					"sourceStockOrderId": {
						"type": "string",
						"description": "Source stock order ids"
					},
					"targetStockOrderId": {
						"type": "string",
						"description": "Target stock order unit ids"
					},
					"semiProductId": {
						"type": "string",
						"description": "Semi product id. Auto set at inserting"
					},
					"sourceFacilityId": {
						"type": "string",
						"description": "Source facility. Set automatically from the semi product."
					},
					"targetFacilityId": {
						"type": "string",
						"description": "Target facility. Set automatically from the semi product."
					},
					"isProcessing": {
						"type": "boolean",
						"description": "True if the transaction is a processing transactions"
					},
					"actionType": {
						"$ref": "#/components/schemas/ChainActionType",
						"description": "Definition of transaction action viewed as a business action."
					},
					"status": {
						"type": "string",
						"enum": [
							"PENDING",
							"CANCELED",
							"EXECUTED"
						],
						"description": "Transaction status."
					},
					"shippmentId": {
						"type": "string",
						"description": "Shippment code"
					},
					"inputMeasureUnitType": {
						"$ref": "#/components/schemas/ChainMeasureUnitType",
						"description": "Input measure unit type. Set automatically from semi product."
					},
					"inputQuantity": {
						"type": "number",
						"format": "double",
						"description": "Input quantity"
					},
					"outputMeasureUnitType": {
						"$ref": "#/components/schemas/ChainMeasureUnitType",
						"description": "Output measure unit type. Set automatically from semi product."
					},
					"outputQuantity": {
						"type": "number",
						"format": "double",
						"description": "Output quantity"
					},
					"pricePerUnit": {
						"type": "number",
						"format": "double",
						"description": "Price per unit"
					},
					"currency": {
						"type": "string",
						"description": "Currency code according to ISO 4217 for pricePerUnit"
					},
					"gradeAbbreviationId": {
						"type": "string",
						"description": "Grade abbreviaton id"
					},
					"rejectComment": {
						"type": "string",
						"description": "Reject comment;"
					},
					"gradeAbbreviation": {
						"$ref": "#/components/schemas/ChainGradeAbbreviation",
						"description": "Grade abbreviaton readOnly"
					},
					"sourceFacility": {
						"$ref": "#/components/schemas/ChainFacility",
						"description": "Source facility object. Read only"
					},
					"targetFacility": {
						"$ref": "#/components/schemas/ChainFacility",
						"description": "Target facility object. Read only."
					},
					"semiProduct": {
						"$ref": "#/components/schemas/ChainSemiProduct",
						"description": "Semi product object. Read only;"
					},
					"sourceStockOrder": {
						"$ref": "#/components/schemas/ChainStockOrder",
						"description": "Source stock order. Read only"
					}
				},
				"required": [
					"organizationId",
					"initiatorUserId",
					"status",
					"inputQuantity",
					"outputQuantity"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DocTypeIdsWithRequired": {
				"properties": {
					"processingEvidenceTypeId": {
						"type": "string"
					},
					"required": {
						"type": "boolean"
					},
					"requiredOnQuote": {
						"type": "boolean"
					},
					"requiredOneOfGroupIdForQuote": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"processingEvidenceTypeId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChainProcessingEvidenceType": {
				"description": "Codebook for processing evidence type",
				"properties": {
					"docType": {
						"type": "string",
						"nullable": true
					},
					"_id": {
						"type": "string",
						"nullable": true
					},
					"_rev": {
						"type": "string",
						"nullable": true
					},
					"dbKey": {
						"type": "string",
						"nullable": true
					},
					"mode__": {
						"type": "string",
						"enum": [
							"insert",
							"insert_as_is",
							"update"
						]
					},
					"created": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of creation"
					},
					"lastChange": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of last change"
					},
					"userCreatedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that created the document."
					},
					"userChangedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that changed the document."
					},
					"id": {
						"type": "string",
						"description": "capitalized underscored string that defines the document requirement"
					},
					"label": {
						"type": "string",
						"description": "Default english label"
					},
					"type": {
						"type": "string",
						"enum": [
							"DOCUMENT",
							"FIELD",
							"CALCULATED"
						],
						"description": "Type of evidence type. DOCUMENT is prescribed (date, type, document). FIELD is any other. Some others can be added."
					},
					"fairness": {
						"type": "boolean",
						"nullable": true,
						"description": "Whether the evidence is of fairness type"
					},
					"provenance": {
						"type": "boolean",
						"nullable": true,
						"description": "Whether the evidence is of provenance type"
					},
					"quality": {
						"type": "boolean",
						"nullable": true,
						"description": "Whether the evidence is of quality type"
					},
					"required": {
						"type": "boolean",
						"nullable": true,
						"description": "Whether the evidence is required (not used for settings, just in transformations)"
					},
					"requiredOnQuote": {
						"type": "boolean",
						"nullable": true,
						"description": "Whether the evidence is required on quote (not used for settings, just in transformations)"
					},
					"requiredOneOfGroupIdForQuote": {
						"type": "string",
						"nullable": true,
						"description": "Defines a group in which at least one document has to be provided (is required)"
					}
				},
				"required": [
					"id",
					"label"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChainProcessingAction": {
				"properties": {
					"docType": {
						"type": "string",
						"nullable": true
					},
					"_id": {
						"type": "string",
						"nullable": true
					},
					"_rev": {
						"type": "string",
						"nullable": true
					},
					"dbKey": {
						"type": "string",
						"nullable": true
					},
					"mode__": {
						"type": "string",
						"enum": [
							"insert",
							"insert_as_is",
							"update"
						]
					},
					"created": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of creation"
					},
					"lastChange": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of last change"
					},
					"userCreatedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that created the document."
					},
					"userChangedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that changed the document."
					},
					"productId": {
						"type": "string",
						"description": "id reference of the relevant ChainProduct"
					},
					"organizationId": {
						"type": "string",
						"description": "id reference of the relevant ChainOrganization"
					},
					"name": {
						"type": "string",
						"description": "Name of the processing action"
					},
					"description": {
						"type": "string",
						"description": "Description of the processing action"
					},
					"inputSemiProductId": {
						"type": "string",
						"description": "Input semi-product id"
					},
					"outputSemiProductId": {
						"type": "string",
						"description": "Output semi-product id"
					},
					"requiredFields": {
						"items": {
							"$ref": "#/components/schemas/FieldDefinition"
						},
						"type": "array",
						"description": "Required fields"
					},
					"inputSemiProduct": {
						"$ref": "#/components/schemas/ChainSemiProduct",
						"description": "Input semi-product on get only"
					},
					"outputSemiProduct": {
						"$ref": "#/components/schemas/ChainSemiProduct",
						"description": "Output semi-product on get only"
					},
					"requiredDocTypeIds": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "List of required document types for processing ids"
					},
					"requiredDocTypeIdsWithRequired": {
						"items": {
							"$ref": "#/components/schemas/DocTypeIdsWithRequired"
						},
						"type": "array",
						"description": "List of required document types for processing ids"
					},
					"requiredDocTypes": {
						"items": {
							"$ref": "#/components/schemas/ChainProcessingEvidenceType"
						},
						"type": "array",
						"description": "List of required document types for processing ids"
					},
					"repackedOutputs": {
						"type": "boolean",
						"nullable": true,
						"description": "If transaction output has multiple outputSemiProducts"
					},
					"maxOutputWeight": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Max weight of one of the multiple outputSemiProducts (required if repackedOutputs)"
					},
					"type": {
						"type": "string",
						"enum": [
							"PROCESSING",
							"SHIPMENT",
							"TRANSFER"
						],
						"description": "Type of processing transaction.\nPROCESSING: many-to-many semi products, consumed and produced quantities not connected\nSHIPMENT: same semiproduct. Acts as an order of the same quantity from target facility"
					},
					"prefix": {
						"type": "string",
						"description": "Prefix. Used to build internal lot number names."
					},
					"publicTimelineLabel": {
						"type": "string",
						"nullable": true,
						"description": "Public timeline name. If not null, the processing order with this action is shown on public timeline."
					},
					"publicTimelineLocation": {
						"type": "string",
						"nullable": true,
						"description": "Public timeline location."
					},
					"publicTimelineIcon": {
						"type": "string",
						"enum": [
							"SHIP",
							"LEAF",
							"WAREHOUSE",
							"QRCODE",
							"OTHER"
						],
						"nullable": true,
						"description": "Icon type in public timeline"
					}
				},
				"required": [
					"productId",
					"organizationId",
					"name",
					"description"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChainProcessingOrder": {
				"description": "Processing order executed according to processing transaction.",
				"properties": {
					"docType": {
						"type": "string",
						"nullable": true
					},
					"_id": {
						"type": "string",
						"nullable": true
					},
					"_rev": {
						"type": "string",
						"nullable": true
					},
					"dbKey": {
						"type": "string",
						"nullable": true
					},
					"mode__": {
						"type": "string",
						"enum": [
							"insert",
							"insert_as_is",
							"update"
						]
					},
					"created": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of creation"
					},
					"lastChange": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of last change"
					},
					"userCreatedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that created the document."
					},
					"userChangedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that changed the document."
					},
					"facilityId": {
						"type": "string",
						"description": "Facility id. Not clear, how to put this into facility."
					},
					"processingActionId": {
						"type": "string",
						"description": "Processing action id."
					},
					"initiatorUserId": {
						"type": "string",
						"description": "Processing order initiator (user), userId from af-coffee-ap"
					},
					"targetStockOrderIds": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Target stock order Ids. Calculated when saving. Should not be counted as a reference when programing chaincode since the primary reference is from targert order back."
					},
					"desiredQuantity": {
						"type": "number",
						"format": "double",
						"description": "Desired quantity when it acts like an order (processing action type is TRANSFER."
					},
					"desiredQuantityUnit": {
						"$ref": "#/components/schemas/ChainMeasureUnitType",
						"description": "Measure unit of the desired quantity."
					},
					"facility": {
						"$ref": "#/components/schemas/ChainFacility",
						"description": "Facility. Read only."
					},
					"targetStockOrders": {
						"items": {
							"$ref": "#/components/schemas/ChainStockOrder"
						},
						"type": "array",
						"description": "Target stock orders. Read only."
					},
					"inputTransactions": {
						"items": {
							"$ref": "#/components/schemas/ChainTransaction"
						},
						"type": "array",
						"description": "Input transactions. Read only."
					},
					"processingAction": {
						"$ref": "#/components/schemas/ChainProcessingAction",
						"description": "Processing action. Read only."
					},
					"inputOrders": {
						"items": {
							"$ref": "#/components/schemas/ChainStockOrder"
						},
						"type": "array",
						"description": "Input stock orders. Read only"
					},
					"processingDate": {
						"type": "string",
						"nullable": true,
						"description": "Processing date"
					}
				},
				"required": [
					"processingActionId",
					"initiatorUserId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChainSemiProductDatePriceAtCompanyCustomer": {
				"properties": {
					"id": {
						"type": "string",
						"description": "semi-product id"
					},
					"from": {
						"type": "string",
						"description": "from date"
					},
					"to": {
						"type": "string",
						"description": "to date"
					},
					"price": {
						"type": "string",
						"description": "price"
					},
					"currency": {
						"type": "string",
						"description": "currency code according to ISO 4217 for price"
					}
				},
				"required": [
					"id",
					"from",
					"to",
					"price",
					"currency"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChainCompanyCustomer": {
				"description": "Company (legal person) type customer",
				"properties": {
					"docType": {
						"type": "string",
						"nullable": true
					},
					"_id": {
						"type": "string",
						"nullable": true
					},
					"_rev": {
						"type": "string",
						"nullable": true
					},
					"dbKey": {
						"type": "string",
						"nullable": true
					},
					"mode__": {
						"type": "string",
						"enum": [
							"insert",
							"insert_as_is",
							"update"
						]
					},
					"created": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of creation"
					},
					"lastChange": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of last change"
					},
					"userCreatedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that created the document."
					},
					"userChangedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that changed the document."
					},
					"cccid": {
						"type": "number",
						"format": "double",
						"description": "Custemor id from af-coffee-ap database\nRENAME IT FOR NOW (until Java api is fix)"
					},
					"productId": {
						"type": "number",
						"format": "double",
						"description": "Product Id as in af-coffee database"
					},
					"companyId": {
						"type": "number",
						"format": "double",
						"description": "Company Id as in af-coffee database"
					},
					"type": {
						"type": "string",
						"enum": [
							"CUSTOMER",
							"OTHER"
						],
						"description": "Type of company customer;"
					},
					"organizationId": {
						"type": "string",
						"description": "Organization id. Set automatically from companyId;"
					},
					"chainProductId": {
						"type": "string",
						"description": "Product id in chain database. Set automatically from productId."
					},
					"contact": {
						"type": "string",
						"description": "Contact"
					},
					"email": {
						"type": "string",
						"description": "Email"
					},
					"location": {
						"$ref": "#/components/schemas/ChainLocation",
						"description": "Location (address)"
					},
					"name": {
						"type": "string",
						"description": "Name"
					},
					"officialCompanyName": {
						"type": "string",
						"description": "Official company name"
					},
					"phone": {
						"type": "string",
						"description": "Phone"
					},
					"vatId": {
						"type": "string",
						"description": "Vat id"
					},
					"semiProductPrices": {
						"items": {
							"$ref": "#/components/schemas/ChainSemiProductDatePriceAtCompanyCustomer"
						},
						"type": "array",
						"description": "Vat id"
					}
				},
				"required": [
					"productId",
					"companyId",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChainProductOrder": {
				"description": "Represents a product order. Items in the order are",
				"properties": {
					"docType": {
						"type": "string",
						"nullable": true
					},
					"_id": {
						"type": "string",
						"nullable": true
					},
					"_rev": {
						"type": "string",
						"nullable": true
					},
					"dbKey": {
						"type": "string",
						"nullable": true
					},
					"mode__": {
						"type": "string",
						"enum": [
							"insert",
							"insert_as_is",
							"update"
						]
					},
					"created": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of creation"
					},
					"lastChange": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of last change"
					},
					"userCreatedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that created the document."
					},
					"userChangedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that changed the document."
					},
					"id": {
						"type": "string",
						"description": "Order id."
					},
					"facilityId": {
						"type": "string",
						"description": "Facility to which order is ordered"
					},
					"deliveryDeadline": {
						"type": "string",
						"nullable": true,
						"description": "Order delivery deadline"
					},
					"customerId": {
						"type": "string",
						"description": "Company customer id."
					},
					"requiredwomensOnly": {
						"type": "boolean",
						"description": "Indicator whether only women's coffee is required"
					},
					"requiredGradeId": {
						"type": "string",
						"description": "Grade Id."
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/ChainStockOrder"
						},
						"type": "array",
						"nullable": true,
						"description": "Read only list of ordered items. Used also on creation"
					},
					"facility": {
						"$ref": "#/components/schemas/ChainFacility",
						"description": "Read only facility."
					},
					"customer": {
						"$ref": "#/components/schemas/ChainCompanyCustomer",
						"description": "Read only company customer."
					},
					"requiredGrade": {
						"$ref": "#/components/schemas/ChainGradeAbbreviation",
						"description": "Read only required grade."
					},
					"processingOrders": {
						"items": {
							"$ref": "#/components/schemas/ChainProcessingOrder"
						},
						"type": "array",
						"description": "Processing orders. Insert only. Does not get saved. Used for creating orders."
					},
					"open": {
						"type": "boolean",
						"description": "List of open orders"
					}
				},
				"required": [
					"id",
					"facilityId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedList_ChainProcessingOrder_": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double",
						"description": "Count of all items satisfying 'paginatable' request."
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/ChainProcessingOrder"
						},
						"type": "array",
						"description": "Response items."
					},
					"limit": {
						"type": "number",
						"format": "double",
						"description": "Limit got from request"
					},
					"offset": {
						"type": "number",
						"format": "double",
						"description": "Offset got from request"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiDefaultResponseStatusEnum": {
				"type": "string",
				"enum": [
					"OK",
					"ERROR",
					"REQUEST_BODY_ERROR",
					"VALIDATION_ERROR",
					"TOO_MANY_REQUESTS",
					"UNAUTHORIZED",
					"AUTH_ERROR",
					"UPSTREAM_HTTP_ERROR",
					"INVALID_REQUEST",
					"NOT_IMPLEMENTED"
				],
				"description": "All possible values of status."
			},
			"ApiValidationErrorDetails": {
				"properties": {
					"className": {
						"type": "string"
					},
					"fieldErrors": {
						"properties": {},
						"additionalProperties": {
							"type": "string"
						},
						"type": "object"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_PaginatedList_ChainProcessingOrder__": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PaginatedList_ChainProcessingOrder_"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChainProcessingOrder_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ChainProcessingOrder"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_any_": {
				"properties": {
					"data": {},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedList_ChainActionType_": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double",
						"description": "Count of all items satisfying 'paginatable' request."
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/ChainActionType"
						},
						"type": "array",
						"description": "Response items."
					},
					"limit": {
						"type": "number",
						"format": "double",
						"description": "Limit got from request"
					},
					"offset": {
						"type": "number",
						"format": "double",
						"description": "Offset got from request"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_PaginatedList_ChainActionType__": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PaginatedList_ChainActionType_"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChainActionType_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ChainActionType"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedList_ChainFacilityType_": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double",
						"description": "Count of all items satisfying 'paginatable' request."
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/ChainFacilityType"
						},
						"type": "array",
						"description": "Response items."
					},
					"limit": {
						"type": "number",
						"format": "double",
						"description": "Limit got from request"
					},
					"offset": {
						"type": "number",
						"format": "double",
						"description": "Offset got from request"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_PaginatedList_ChainFacilityType__": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PaginatedList_ChainFacilityType_"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChainFacilityType_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ChainFacilityType"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedList_ChainMeasureUnitType_": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double",
						"description": "Count of all items satisfying 'paginatable' request."
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/ChainMeasureUnitType"
						},
						"type": "array",
						"description": "Response items."
					},
					"limit": {
						"type": "number",
						"format": "double",
						"description": "Limit got from request"
					},
					"offset": {
						"type": "number",
						"format": "double",
						"description": "Offset got from request"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_PaginatedList_ChainMeasureUnitType__": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PaginatedList_ChainMeasureUnitType_"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChainMeasureUnitType_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ChainMeasureUnitType"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedList_ChainGradeAbbreviation_": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double",
						"description": "Count of all items satisfying 'paginatable' request."
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/ChainGradeAbbreviation"
						},
						"type": "array",
						"description": "Response items."
					},
					"limit": {
						"type": "number",
						"format": "double",
						"description": "Limit got from request"
					},
					"offset": {
						"type": "number",
						"format": "double",
						"description": "Offset got from request"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_PaginatedList_ChainGradeAbbreviation__": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PaginatedList_ChainGradeAbbreviation_"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChainGradeAbbreviation_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ChainGradeAbbreviation"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedList_ChainProcessingEvidenceType_": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double",
						"description": "Count of all items satisfying 'paginatable' request."
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/ChainProcessingEvidenceType"
						},
						"type": "array",
						"description": "Response items."
					},
					"limit": {
						"type": "number",
						"format": "double",
						"description": "Limit got from request"
					},
					"offset": {
						"type": "number",
						"format": "double",
						"description": "Offset got from request"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_PaginatedList_ChainProcessingEvidenceType__": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PaginatedList_ChainProcessingEvidenceType_"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChainProcessingEvidenceType_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ChainProcessingEvidenceType"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChainOrderEvidenceType": {
				"description": "Codebook for order evidence type",
				"properties": {
					"docType": {
						"type": "string",
						"nullable": true
					},
					"_id": {
						"type": "string",
						"nullable": true
					},
					"_rev": {
						"type": "string",
						"nullable": true
					},
					"dbKey": {
						"type": "string",
						"nullable": true
					},
					"mode__": {
						"type": "string",
						"enum": [
							"insert",
							"insert_as_is",
							"update"
						]
					},
					"id": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"fairness": {
						"type": "boolean",
						"nullable": true
					},
					"provenance": {
						"type": "boolean",
						"nullable": true
					},
					"quality": {
						"type": "boolean",
						"nullable": true
					}
				},
				"required": [
					"id",
					"label"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedList_ChainOrderEvidenceType_": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double",
						"description": "Count of all items satisfying 'paginatable' request."
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/ChainOrderEvidenceType"
						},
						"type": "array",
						"description": "Response items."
					},
					"limit": {
						"type": "number",
						"format": "double",
						"description": "Limit got from request"
					},
					"offset": {
						"type": "number",
						"format": "double",
						"description": "Offset got from request"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_PaginatedList_ChainOrderEvidenceType__": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PaginatedList_ChainOrderEvidenceType_"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChainOrderEvidenceType_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ChainOrderEvidenceType"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedList_ChainCompanyCustomer_": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double",
						"description": "Count of all items satisfying 'paginatable' request."
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/ChainCompanyCustomer"
						},
						"type": "array",
						"description": "Response items."
					},
					"limit": {
						"type": "number",
						"format": "double",
						"description": "Limit got from request"
					},
					"offset": {
						"type": "number",
						"format": "double",
						"description": "Offset got from request"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_PaginatedList_ChainCompanyCustomer__": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PaginatedList_ChainCompanyCustomer_"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChainCompanyCustomer_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ChainCompanyCustomer"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChainCompanyCustomer-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/ChainCompanyCustomer"
						},
						"type": "array"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedList_ChainDocumentRequirement_": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double",
						"description": "Count of all items satisfying 'paginatable' request."
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/ChainDocumentRequirement"
						},
						"type": "array",
						"description": "Response items."
					},
					"limit": {
						"type": "number",
						"format": "double",
						"description": "Limit got from request"
					},
					"offset": {
						"type": "number",
						"format": "double",
						"description": "Offset got from request"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_PaginatedList_ChainDocumentRequirement__": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PaginatedList_ChainDocumentRequirement_"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChainDocumentRequirement_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ChainDocumentRequirement"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedList_ChainDocumentRequirementList_": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double",
						"description": "Count of all items satisfying 'paginatable' request."
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/ChainDocumentRequirementList"
						},
						"type": "array",
						"description": "Response items."
					},
					"limit": {
						"type": "number",
						"format": "double",
						"description": "Limit got from request"
					},
					"offset": {
						"type": "number",
						"format": "double",
						"description": "Offset got from request"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_PaginatedList_ChainDocumentRequirementList__": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PaginatedList_ChainDocumentRequirementList_"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChainDocumentRequirementList_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ChainDocumentRequirementList"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedList_ChainFacility_": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double",
						"description": "Count of all items satisfying 'paginatable' request."
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/ChainFacility"
						},
						"type": "array",
						"description": "Response items."
					},
					"limit": {
						"type": "number",
						"format": "double",
						"description": "Limit got from request"
					},
					"offset": {
						"type": "number",
						"format": "double",
						"description": "Offset got from request"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_PaginatedList_ChainFacility__": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PaginatedList_ChainFacility_"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChainFacility_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ChainFacility"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedList_ChainProductOrder_": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double",
						"description": "Count of all items satisfying 'paginatable' request."
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/ChainProductOrder"
						},
						"type": "array",
						"description": "Response items."
					},
					"limit": {
						"type": "number",
						"format": "double",
						"description": "Limit got from request"
					},
					"offset": {
						"type": "number",
						"format": "double",
						"description": "Offset got from request"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_PaginatedList_ChainProductOrder__": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PaginatedList_ChainProductOrder_"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"WeightedAggregate_any_": {
				"properties": {
					"fieldID": {
						"type": "string"
					},
					"value": {},
					"quantity": {
						"type": "number",
						"format": "double"
					},
					"measurementUnit": {
						"$ref": "#/components/schemas/ChainMeasureUnitType"
					},
					"stockOrderId": {
						"type": "string"
					},
					"identifier": {
						"type": "string"
					},
					"isDocument": {
						"type": "boolean"
					},
					"processingAction": {
						"$ref": "#/components/schemas/ChainProcessingAction"
					},
					"required": {
						"type": "boolean"
					},
					"mandatory": {
						"type": "boolean"
					},
					"requiredOnQuote": {
						"type": "boolean"
					},
					"requiredOnQuoteOneOk": {
						"type": "boolean"
					},
					"requiredOneOfGroupIdForQuote": {
						"type": "string"
					}
				},
				"required": [
					"fieldID",
					"value",
					"quantity",
					"measurementUnit"
				],
				"type": "object",
				"additionalProperties": false
			},
			"StockOrderAgg": {
				"properties": {
					"stockOrder": {
						"$ref": "#/components/schemas/ChainStockOrder"
					},
					"fields": {
						"items": {
							"$ref": "#/components/schemas/WeightedAggregate_any_"
						},
						"type": "array"
					},
					"documents": {
						"items": {
							"$ref": "#/components/schemas/WeightedAggregate_any_"
						},
						"type": "array"
					}
				},
				"required": [
					"stockOrder",
					"fields",
					"documents"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ProcessingOrderHistory": {
				"properties": {
					"depth": {
						"type": "number",
						"format": "double"
					},
					"processingOrder": {
						"$ref": "#/components/schemas/ChainProcessingOrder"
					},
					"stockOrderAggs": {
						"items": {
							"$ref": "#/components/schemas/StockOrderAgg"
						},
						"type": "array"
					},
					"stockOrderIds": {}
				},
				"required": [
					"depth",
					"processingOrder",
					"stockOrderAggs"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ProcessingOrderHistory-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/ProcessingOrderHistory"
						},
						"type": "array"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"QuoteRequirementConfirmation": {
				"properties": {
					"fieldId": {
						"type": "string"
					},
					"fieldIds": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"fairness": {
						"type": "boolean"
					},
					"provenance": {
						"type": "boolean"
					},
					"quality": {
						"type": "boolean"
					},
					"targetValue": {},
					"aggregates": {
						"items": {
							"$ref": "#/components/schemas/WeightedAggregate_any_"
						},
						"type": "array"
					}
				},
				"required": [
					"aggregates"
				],
				"type": "object",
				"additionalProperties": false
			},
			"QuoteRequirementConfirmationsWithMetaData": {
				"properties": {
					"requirements": {
						"items": {
							"$ref": "#/components/schemas/QuoteRequirementConfirmation"
						},
						"type": "array"
					},
					"producers": {
						"items": {
							"$ref": "#/components/schemas/ChainOrganization"
						},
						"type": "array"
					}
				},
				"required": [
					"requirements",
					"producers"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_QuoteRequirementConfirmationsWithMetaData_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/QuoteRequirementConfirmationsWithMetaData"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChainProductOrder_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ChainProductOrder"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedList_ChainOrganization_": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double",
						"description": "Count of all items satisfying 'paginatable' request."
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/ChainOrganization"
						},
						"type": "array",
						"description": "Response items."
					},
					"limit": {
						"type": "number",
						"format": "double",
						"description": "Limit got from request"
					},
					"offset": {
						"type": "number",
						"format": "double",
						"description": "Offset got from request"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_PaginatedList_ChainOrganization__": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PaginatedList_ChainOrganization_"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChainOrganization_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ChainOrganization"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChainActivityProof": {
				"description": "Chain action proof",
				"properties": {
					"docType": {
						"type": "string",
						"nullable": true
					},
					"_id": {
						"type": "string",
						"nullable": true
					},
					"_rev": {
						"type": "string",
						"nullable": true
					},
					"dbKey": {
						"type": "string",
						"nullable": true
					},
					"mode__": {
						"type": "string",
						"enum": [
							"insert",
							"insert_as_is",
							"update"
						]
					},
					"created": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of creation"
					},
					"lastChange": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of last change"
					},
					"userCreatedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that created the document."
					},
					"userChangedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that changed the document."
					},
					"formalCreationDate": {
						"type": "string",
						"description": "Formal date of the action proof."
					},
					"validUntil": {
						"type": "string",
						"description": "Valid until"
					},
					"type": {
						"description": "Type of the proof."
					},
					"document": {
						"$ref": "#/components/schemas/ChainFileInfo",
						"description": "Formal document proof."
					}
				},
				"required": [
					"formalCreationDate",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChainBulkPayment": {
				"description": "Chain bulk payment (when paying at the bank to multiple farmers)",
				"properties": {
					"docType": {
						"type": "string",
						"nullable": true
					},
					"_id": {
						"type": "string",
						"nullable": true
					},
					"_rev": {
						"type": "string",
						"nullable": true
					},
					"dbKey": {
						"type": "string",
						"nullable": true
					},
					"mode__": {
						"type": "string",
						"enum": [
							"insert",
							"insert_as_is",
							"update"
						]
					},
					"created": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of creation"
					},
					"lastChange": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of last change"
					},
					"userCreatedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that created the document."
					},
					"userChangedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that changed the document."
					},
					"currency": {
						"type": "string",
						"description": "Currency of payment"
					},
					"formalCreationTime": {
						"type": "string",
						"description": "Formal creation time set while entering."
					},
					"bankInfo": {
						"$ref": "#/components/schemas/BankAccountInfo",
						"description": "Bank account info where transfer iz carried out."
					},
					"payingOrganizationId": {
						"type": "string",
						"description": "Organization that is paying"
					},
					"paymentPurposeType": {
						"type": "string",
						"enum": [
							"ADVANCE_PAYMENT",
							"FIRST_INSTALLMENT",
							"SECOND_INSTALLMENT",
							"WOMEN_PREMIUM",
							"INVOICE_PAYMENT"
						],
						"description": "Payment purpose type."
					},
					"paymentDescription": {
						"type": "string",
						"description": "Payment description."
					},
					"totalAmount": {
						"type": "number",
						"format": "double",
						"description": "Total amount of payment in currency"
					},
					"paymentPerKg": {
						"type": "number",
						"format": "double",
						"description": "Payment per kg in currency"
					},
					"additionalCost": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Additional cost of payment in currency"
					},
					"additionalCostDescription": {
						"type": "string",
						"nullable": true,
						"description": "Additional cost description."
					},
					"stockOrderIds": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "List of stockOrder ids."
					},
					"additionalProofs": {
						"items": {
							"$ref": "#/components/schemas/ChainActivityProof"
						},
						"type": "array",
						"description": "List of additional proofs."
					},
					"receiptNumber": {
						"type": "string",
						"nullable": true,
						"description": "Receipt number"
					},
					"payingOrganization": {
						"$ref": "#/components/schemas/ChainOrganization",
						"description": "Organization that is paying. Not stored. On write _id is used."
					},
					"payments": {
						"items": {
							"$ref": "#/components/schemas/ChainPayment"
						},
						"type": "array",
						"description": "List of payments."
					}
				},
				"required": [
					"currency",
					"formalCreationTime",
					"payingOrganizationId",
					"paymentDescription",
					"totalAmount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChainPayment": {
				"description": "Chain payment",
				"properties": {
					"docType": {
						"type": "string",
						"nullable": true
					},
					"_id": {
						"type": "string",
						"nullable": true
					},
					"_rev": {
						"type": "string",
						"nullable": true
					},
					"dbKey": {
						"type": "string",
						"nullable": true
					},
					"mode__": {
						"type": "string",
						"enum": [
							"insert",
							"insert_as_is",
							"update"
						]
					},
					"created": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of creation"
					},
					"lastChange": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of last change"
					},
					"userCreatedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that created the document."
					},
					"userChangedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that changed the document."
					},
					"formalCreationTime": {
						"type": "string",
						"description": "Formal creation time set while entering."
					},
					"paymentType": {
						"type": "string",
						"enum": [
							"CASH",
							"BANK"
						],
						"description": "Type of payment."
					},
					"currency": {
						"type": "string",
						"description": "Currency of payment"
					},
					"amount": {
						"type": "number",
						"format": "double",
						"description": "Amount of payment in currency"
					},
					"amountPaidToTheCollector": {
						"type": "number",
						"format": "double",
						"description": "Amount paid to the collector"
					},
					"stockOrderId": {
						"type": "string",
						"description": "Stock order for which payment was done (order reference)."
					},
					"orderId": {
						"type": "string",
						"description": "Order for which payment was done (when payment purpose is second_installment aka member bonus)."
					},
					"transactionIds": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Reference to (input) transactions for which payment was actually done."
					},
					"payingOrganizationId": {
						"type": "string",
						"description": "Organization that is paying"
					},
					"recipientOrganizationId": {
						"type": "string",
						"nullable": true,
						"description": "Recipient organization"
					},
					"recipientUserCustomerId": {
						"type": "string",
						"nullable": true,
						"description": "Recipient user customer"
					},
					"representativeOfRecipientOrganizationId": {
						"type": "string",
						"nullable": true,
						"description": "Recipient organization (i.e. collector's organization)"
					},
					"representativeOfRecipientUserCustomerId": {
						"type": "string",
						"nullable": true,
						"description": "Recipient user customer (i.e. collector)"
					},
					"recipientCompanyCustomerId": {
						"type": "string",
						"nullable": true,
						"description": "Recipient company  customer"
					},
					"recipientType": {
						"type": "string",
						"enum": [
							"ORGANIZATION",
							"COMPANY_CUSTOMER",
							"USER_CUSTOMER"
						],
						"description": "Type of recipient."
					},
					"receiptNumber": {
						"type": "string",
						"nullable": true,
						"description": "Receipt number on the attached receipt (receiptDocumentId). Mandatory for the cash transfer."
					},
					"receiptDocument": {
						"$ref": "#/components/schemas/ChainFileInfo",
						"description": "Receipt document. Required for the cash transfer."
					},
					"receiptDocumentType": {
						"type": "string",
						"enum": [
							"PURCHASE_SHEET",
							"RECEIPT"
						],
						"description": "Receipt document type."
					},
					"bankTransferId": {
						"type": "string",
						"nullable": true,
						"description": "Reference to the bulk payment."
					},
					"paymentPurposeType": {
						"type": "string",
						"enum": [
							"ADVANCE_PAYMENT",
							"FIRST_INSTALLMENT",
							"SECOND_INSTALLMENT",
							"WOMEN_PREMIUM",
							"INVOICE_PAYMENT"
						],
						"description": "Payment purpose type."
					},
					"paymentStatus": {
						"type": "string",
						"enum": [
							"UNCONFIRMED",
							"CONFIRMED"
						],
						"description": "Payment status."
					},
					"paymentConfirmedByUser": {
						"type": "string",
						"nullable": true,
						"description": "Payment confirmed by userId."
					},
					"paymentConfirmedByOrganization": {
						"type": "string",
						"nullable": true,
						"description": "Payment confirmed by oganizationId."
					},
					"paymentConfirmedAtTime": {
						"type": "string",
						"nullable": true,
						"description": "Payment confirmed at this time."
					},
					"payingOrganization": {
						"$ref": "#/components/schemas/ChainOrganization",
						"description": "Organization that is paying. Not stored. On write _id is used."
					},
					"recipientOrganization": {
						"$ref": "#/components/schemas/ChainOrganization",
						"description": "Recipient organization. Not stored. On write _id is used."
					},
					"recipientUserCustomer": {
						"$ref": "#/components/schemas/ChainUserCustomer",
						"description": "Recipient user customer. Not stored. On write _id is used."
					},
					"recipientCompanyCustomer": {
						"$ref": "#/components/schemas/ChainCompanyCustomer",
						"description": "Recipient user customer. Not stored. On write _id is used."
					},
					"bankTransfer": {
						"$ref": "#/components/schemas/ChainBulkPayment",
						"description": "Bank transfer. Not stored. On write _id is used."
					},
					"representativeOfRecipientOrganization": {
						"$ref": "#/components/schemas/ChainOrganization",
						"description": "Recipient organization (i.e. collector's organization). Not stored. On write _id is used."
					},
					"representativeOfRecipientUserCustomer": {
						"$ref": "#/components/schemas/ChainUserCustomer",
						"description": "Recipient user customer (i.e. collector). Not stored. On write _id is used."
					},
					"queryFacilityName": {
						"type": "string",
						"nullable": true,
						"description": "Stock order facility"
					},
					"queryPurchaseOrderName": {
						"type": "string",
						"nullable": true,
						"description": "Stock order name."
					},
					"queryProducerUserCustomerName": {
						"type": "string",
						"nullable": true,
						"description": "Producer user customer name."
					},
					"preferredWayOfPayment": {
						"type": "string",
						"nullable": true
					},
					"productionDate": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"formalCreationTime",
					"paymentType",
					"currency",
					"amount",
					"stockOrderId",
					"payingOrganizationId",
					"recipientType"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChainBulkPayment_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ChainBulkPayment"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedList_ChainBulkPayment_": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double",
						"description": "Count of all items satisfying 'paginatable' request."
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/ChainBulkPayment"
						},
						"type": "array",
						"description": "Response items."
					},
					"limit": {
						"type": "number",
						"format": "double",
						"description": "Limit got from request"
					},
					"offset": {
						"type": "number",
						"format": "double",
						"description": "Offset got from request"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_PaginatedList_ChainBulkPayment__": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PaginatedList_ChainBulkPayment_"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChainPayment_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ChainPayment"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedList_ChainPayment_": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double",
						"description": "Count of all items satisfying 'paginatable' request."
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/ChainPayment"
						},
						"type": "array",
						"description": "Response items."
					},
					"limit": {
						"type": "number",
						"format": "double",
						"description": "Limit got from request"
					},
					"offset": {
						"type": "number",
						"format": "double",
						"description": "Offset got from request"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_PaginatedList_ChainPayment__": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PaginatedList_ChainPayment_"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChainProcessingAction_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ChainProcessingAction"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedList_ChainProcessingAction_": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double",
						"description": "Count of all items satisfying 'paginatable' request."
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/ChainProcessingAction"
						},
						"type": "array",
						"description": "Response items."
					},
					"limit": {
						"type": "number",
						"format": "double",
						"description": "Limit got from request"
					},
					"offset": {
						"type": "number",
						"format": "double",
						"description": "Offset got from request"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_PaginatedList_ChainProcessingAction__": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PaginatedList_ChainProcessingAction_"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedList_ChainProduct_": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double",
						"description": "Count of all items satisfying 'paginatable' request."
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/ChainProduct"
						},
						"type": "array",
						"description": "Response items."
					},
					"limit": {
						"type": "number",
						"format": "double",
						"description": "Limit got from request"
					},
					"offset": {
						"type": "number",
						"format": "double",
						"description": "Offset got from request"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_PaginatedList_ChainProduct__": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PaginatedList_ChainProduct_"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChainProduct_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ChainProduct"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"B2CHistoryItem": {
				"properties": {
					"type": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"location": {
						"type": "string"
					},
					"date": {
						"type": "string"
					},
					"iconEnumType": {
						"type": "string"
					},
					"iconClass": {
						"type": "string"
					}
				},
				"required": [
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"B2CHistoryTimeline": {
				"properties": {
					"items": {
						"items": {
							"$ref": "#/components/schemas/B2CHistoryItem"
						},
						"type": "array"
					},
					"shortItems": {
						"items": {
							"$ref": "#/components/schemas/B2CHistoryItem"
						},
						"type": "array"
					},
					"coopName": {
						"type": "string"
					}
				},
				"required": [
					"items",
					"shortItems"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_B2CHistoryTimeline_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/B2CHistoryTimeline"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedList_ChainSemiProduct_": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double",
						"description": "Count of all items satisfying 'paginatable' request."
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/ChainSemiProduct"
						},
						"type": "array",
						"description": "Response items."
					},
					"limit": {
						"type": "number",
						"format": "double",
						"description": "Limit got from request"
					},
					"offset": {
						"type": "number",
						"format": "double",
						"description": "Offset got from request"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_PaginatedList_ChainSemiProduct__": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PaginatedList_ChainSemiProduct_"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChainSemiProduct_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ChainSemiProduct"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedList_ChainStockOrder_": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double",
						"description": "Count of all items satisfying 'paginatable' request."
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/ChainStockOrder"
						},
						"type": "array",
						"description": "Response items."
					},
					"limit": {
						"type": "number",
						"format": "double",
						"description": "Limit got from request"
					},
					"offset": {
						"type": "number",
						"format": "double",
						"description": "Offset got from request"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_PaginatedList_ChainStockOrder__": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PaginatedList_ChainStockOrder_"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChainSemiProductAvailability": {
				"properties": {
					"facilityId": {
						"type": "string"
					},
					"semiProductId": {
						"type": "string"
					},
					"availableQuantity": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"facilityId",
					"semiProductId",
					"availableQuantity"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChainSemiProductAvailability_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ChainSemiProductAvailability"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChainSemiProductAvailability-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/ChainSemiProductAvailability"
						},
						"type": "array"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AvailabilityInFacilitiesRequest": {
				"properties": {
					"facilityIds": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"semiProductId": {
						"type": "string"
					}
				},
				"required": [
					"facilityIds",
					"semiProductId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChainStockOrder_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ChainStockOrder"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedList_ChainTransaction_": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double",
						"description": "Count of all items satisfying 'paginatable' request."
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/ChainTransaction"
						},
						"type": "array",
						"description": "Response items."
					},
					"limit": {
						"type": "number",
						"format": "double",
						"description": "Limit got from request"
					},
					"offset": {
						"type": "number",
						"format": "double",
						"description": "Offset got from request"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_PaginatedList_ChainTransaction__": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PaginatedList_ChainTransaction_"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChainTransaction_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ChainTransaction"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiUserBaseRoleEnum": {
				"type": "string",
				"enum": [
					"USER",
					"ADMIN"
				],
				"description": "All possible values of role."
			},
			"ApiUserBaseStatusEnum": {
				"type": "string",
				"enum": [
					"UNCONFIRMED",
					"CONFIRMED_EMAIL",
					"ACTIVE",
					"DEACTIVATED"
				],
				"description": "All possible values of status."
			},
			"ChainUser": {
				"description": "User is a user in company",
				"properties": {
					"docType": {
						"type": "string",
						"nullable": true
					},
					"_id": {
						"type": "string",
						"nullable": true
					},
					"_rev": {
						"type": "string",
						"nullable": true
					},
					"dbKey": {
						"type": "string",
						"nullable": true
					},
					"mode__": {
						"type": "string",
						"enum": [
							"insert",
							"insert_as_is",
							"update"
						]
					},
					"created": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of creation"
					},
					"lastChange": {
						"type": "string",
						"nullable": true,
						"description": "Timestamp of last change"
					},
					"userCreatedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that created the document."
					},
					"userChangedId": {
						"type": "string",
						"nullable": true,
						"description": "Id of user that changed the document."
					},
					"id": {
						"type": "number",
						"format": "double",
						"description": "User id from af-coffee-ap database"
					},
					"productionLocation": {
						"$ref": "#/components/schemas/ChainLocation",
						"description": "Production location if the user is a producer."
					},
					"userId": {
						"type": "string",
						"description": "Human readable user identificator"
					},
					"email": {
						"type": "string",
						"description": "Email/username"
					},
					"name": {
						"type": "string",
						"description": "Name"
					},
					"role": {
						"$ref": "#/components/schemas/ApiUserBaseRoleEnum",
						"description": "User role"
					},
					"status": {
						"$ref": "#/components/schemas/ApiUserBaseStatusEnum",
						"description": "Status"
					},
					"surname": {
						"type": "string",
						"description": "Surname"
					}
				},
				"required": [
					"id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedList_ChainUser_": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double",
						"description": "Count of all items satisfying 'paginatable' request."
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/ChainUser"
						},
						"type": "array",
						"description": "Response items."
					},
					"limit": {
						"type": "number",
						"format": "double",
						"description": "Limit got from request"
					},
					"offset": {
						"type": "number",
						"format": "double",
						"description": "Offset got from request"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_PaginatedList_ChainUser__": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PaginatedList_ChainUser_"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChainUser_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ChainUser"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedList_ChainUserCustomer_": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double",
						"description": "Count of all items satisfying 'paginatable' request."
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/ChainUserCustomer"
						},
						"type": "array",
						"description": "Response items."
					},
					"limit": {
						"type": "number",
						"format": "double",
						"description": "Limit got from request"
					},
					"offset": {
						"type": "number",
						"format": "double",
						"description": "Offset got from request"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_PaginatedList_ChainUserCustomer__": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/PaginatedList_ChainUserCustomer_"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChainUserCustomer_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ChainUserCustomer"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChainUserCustomer-Array_": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/ChainUserCustomer"
						},
						"type": "array"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "coffee-be",
		"version": "1.0.0",
		"license": {
			"name": "ISC"
		},
		"contact": {}
	},
	"openapi": "3.0.0",
	"paths": {
		"/chain-api/data/processing-order/list": {
			"get": {
				"operationId": "ListProcessingOrders",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainProcessingOrder__"
								}
							}
						}
					}
				},
				"description": "Paginated list of semi products.",
				"tags": [
					"Processing order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/processing-order/facility/{facilityId}/all": {
			"get": {
				"operationId": "ListProcessingOrdersForFacility",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainProcessingOrder__"
								}
							}
						}
					}
				},
				"description": "Returns a paginated list of all stock orders in a given facility",
				"tags": [
					"Processing order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "_id of a given facility",
						"in": "path",
						"name": "facilityId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "query by identifier",
						"in": "query",
						"name": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/processing-order/{dbId}": {
			"get": {
				"operationId": "GetProcessingOrder",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainProcessingOrder_"
								}
							}
						}
					}
				},
				"description": "Fetches semi product by its _id.",
				"tags": [
					"Processing order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "database _id of the product",
						"in": "path",
						"name": "dbId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/processing-order": {
			"post": {
				"operationId": "PostProcessingOrder",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Inserts or updates a semi product. When inserting fields _id, _rev and docType should not be present.",
				"tags": [
					"Processing order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainProcessingOrder"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/processing-order/delete": {
			"post": {
				"operationId": "DeleteProcessingOrder",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Deletes processing order.",
				"tags": [
					"Processing order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainProcessingOrder"
							}
						}
					}
				}
			}
		},
		"/chain-api/codebook/action-type/list": {
			"get": {
				"operationId": "GetActionTypeList",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainActionType__"
								}
							}
						}
					}
				},
				"description": "Returns paginated list of action types.",
				"tags": [
					"Codebook"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/codebook/action-type/{dbId}": {
			"get": {
				"operationId": "GetActionType",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainActionType_"
								}
							}
						}
					}
				},
				"description": "Fetches an action type by its _id.",
				"tags": [
					"Codebook"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "dbId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/codebook/action-type": {
			"post": {
				"operationId": "PostActionType",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Inserts or updates an action type. When inserting fields _id, _rev and docType should not be present.",
				"tags": [
					"Codebook"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainActionType"
							}
						}
					}
				}
			}
		},
		"/chain-api/codebook/action-type/delete": {
			"post": {
				"operationId": "DeleteActionType",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Deletes action type.",
				"tags": [
					"Codebook"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainActionType"
							}
						}
					}
				}
			}
		},
		"/chain-api/codebook/facility-type/list": {
			"get": {
				"operationId": "GetFacilityTypeList",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainFacilityType__"
								}
							}
						}
					}
				},
				"description": "Returns paginated list of facility types.",
				"tags": [
					"Codebook"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/codebook/facility-type/{dbId}": {
			"get": {
				"operationId": "GetFacilityType",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainFacilityType_"
								}
							}
						}
					}
				},
				"description": "Fetches a facility type by its _id.",
				"tags": [
					"Codebook"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "dbId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/codebook/facility-type": {
			"post": {
				"operationId": "PostFacilityType",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Inserts or updates a facility type. When inserting fields _id, _rev and docType should not be present.",
				"tags": [
					"Codebook"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainFacilityType"
							}
						}
					}
				}
			}
		},
		"/chain-api/codebook/facility-type/delete": {
			"post": {
				"operationId": "DeleteFacilityType",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Deletes facility type.",
				"tags": [
					"Codebook"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainFacilityType"
							}
						}
					}
				}
			}
		},
		"/chain-api/codebook/measure-unit-type/list": {
			"get": {
				"operationId": "GetMeasureUnitTypeList",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainMeasureUnitType__"
								}
							}
						}
					}
				},
				"description": "Returns paginated list of measure unit types.",
				"tags": [
					"Codebook"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/codebook/measure-unit-type/{dbId}": {
			"get": {
				"operationId": "GetMeasureUnitType",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainMeasureUnitType_"
								}
							}
						}
					}
				},
				"description": "Fetches a measure unit type by its _id.",
				"tags": [
					"Codebook"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "dbId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/codebook/measure-unit-type": {
			"post": {
				"operationId": "PostMeasureUnitType",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Inserts or updates a measure unit type. When inserting fields _id, _rev and docType should not be present.",
				"tags": [
					"Codebook"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainMeasureUnitType"
							}
						}
					}
				}
			}
		},
		"/chain-api/codebook/measure-unit-type/delete": {
			"post": {
				"operationId": "DeleteMeasureUnitType",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Deletes measure unit type.",
				"tags": [
					"Codebook"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainMeasureUnitType"
							}
						}
					}
				}
			}
		},
		"/chain-api/codebook/grade-abbreviation/list": {
			"get": {
				"operationId": "GetGradeAbbreviationList",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainGradeAbbreviation__"
								}
							}
						}
					}
				},
				"description": "Returns paginated list of grade abbreviations.",
				"tags": [
					"Codebook"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/codebook/grade-abbreviation/{dbId}": {
			"get": {
				"operationId": "GetGradeAbbreviation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainGradeAbbreviation_"
								}
							}
						}
					}
				},
				"description": "Fetches a grade abbreviation by its _id.",
				"tags": [
					"Codebook"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "dbId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/codebook/grade-abbreviation": {
			"post": {
				"operationId": "PostGradeAbbreviation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Inserts or updates a grade abbreviation. When inserting fields _id, _rev and docType should not be present.",
				"tags": [
					"Codebook"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainGradeAbbreviation"
							}
						}
					}
				}
			}
		},
		"/chain-api/codebook/grade-abbreviation/delete": {
			"post": {
				"operationId": "DeleteGradeAbbreviation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Deletes grade abbreviation.",
				"tags": [
					"Codebook"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainGradeAbbreviation"
							}
						}
					}
				}
			}
		},
		"/chain-api/codebook/processing-evidence-type/list": {
			"get": {
				"operationId": "GetProcessingEvidenceTypeList",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainProcessingEvidenceType__"
								}
							}
						}
					}
				},
				"description": "Returns paginated list of processing evidence type.",
				"tags": [
					"Codebook"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/codebook/processing-evidence-type/{dbId}": {
			"get": {
				"operationId": "GetProcessingEvidenceType",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainProcessingEvidenceType_"
								}
							}
						}
					}
				},
				"description": "Fetches a processing evidence type by its _id.",
				"tags": [
					"Codebook"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "dbId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/codebook/processing-evidence-type": {
			"post": {
				"operationId": "PostProcessingEvidenceType",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Inserts or updates a rocessing evidence type. When inserting fields _id, _rev and docType should not be present.",
				"tags": [
					"Codebook"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainProcessingEvidenceType"
							}
						}
					}
				}
			}
		},
		"/chain-api/codebook/processing-evidence-type/delete": {
			"post": {
				"operationId": "DeleteProcessingEvidenceType",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Deletes rocessing evidence type.",
				"tags": [
					"Codebook"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainProcessingEvidenceType"
							}
						}
					}
				}
			}
		},
		"/chain-api/codebook/order-evidence-type/list": {
			"get": {
				"operationId": "GetOrderEvidenceTypeList",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainOrderEvidenceType__"
								}
							}
						}
					}
				},
				"description": "Returns paginated list of order evidence type.",
				"tags": [
					"Codebook"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/codebook/order-evidence-type/{dbId}": {
			"get": {
				"operationId": "GetOrderEvidenceType",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainOrderEvidenceType_"
								}
							}
						}
					}
				},
				"description": "Fetches a order evidence type by its _id.",
				"tags": [
					"Codebook"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "dbId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/codebook/order-evidence-type": {
			"post": {
				"operationId": "PostOrderEvidenceType",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Inserts or updates a order evidence type. When inserting fields _id, _rev and docType should not be present.",
				"tags": [
					"Codebook"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainOrderEvidenceType"
							}
						}
					}
				}
			}
		},
		"/chain-api/codebook/order-evidence-type/delete": {
			"post": {
				"operationId": "DeleteOrderEvidenceType",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Deletes order evidence type.",
				"tags": [
					"Codebook"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainOrderEvidenceType"
							}
						}
					}
				}
			}
		},
		"/chain-api/codebook/translation-templates": {
			"get": {
				"operationId": "GetTranslationTemplates",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"Codebook"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/chain-api/data/company-customer/list": {
			"get": {
				"operationId": "ListCompanyCustomers",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainCompanyCustomer__"
								}
							}
						}
					}
				},
				"description": "Paginated list of company customers.",
				"tags": [
					"Company Customer"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/company-customer/{dbId}": {
			"get": {
				"operationId": "GetCompanyCustomer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainCompanyCustomer_"
								}
							}
						}
					}
				},
				"description": "Fetches comapny customer by its _id.",
				"tags": [
					"Company Customer"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "database id of the product",
						"in": "path",
						"name": "dbId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/company-customer/external/list": {
			"post": {
				"operationId": "CompanyCustomersForIds",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainCompanyCustomer-Array_"
								}
							}
						}
					}
				},
				"description": "Returns a list of company customers matching to the list of external ids.\nWarning: Id lists and response list do not necessary match in length.\nif invalid external id is provided in the request's list the response list is shorter.",
				"tags": [
					"Company Customer"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "list of external ids",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/company-customer/external/{linkId}": {
			"get": {
				"operationId": "GetComapnyCustomerByAFId",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainCompanyCustomer_"
								}
							}
						}
					}
				},
				"description": "Returns company customer according to external database id.",
				"tags": [
					"Company Customer"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "external database product id",
						"in": "path",
						"name": "linkId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/company-customer": {
			"post": {
				"operationId": "PostCompanyCustomer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Inserts or updates a company customer. When inserting fields _id, _rev and docType should not be present.",
				"tags": [
					"Company Customer"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainCompanyCustomer"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/company-customer/list/organization/{organizationId}": {
			"get": {
				"operationId": "ListCompanyCustomersForOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainCompanyCustomer__"
								}
							}
						}
					}
				},
				"description": "Paginated list of company customers for a given organization",
				"tags": [
					"Company Customer"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "_id of a given organization",
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/company-customer/list/product/{productId}/organization/{organizationId}": {
			"get": {
				"operationId": "ListCompanyCustomersForProductAndOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainCompanyCustomer__"
								}
							}
						}
					}
				},
				"description": "Paginated list of company customers for a given organization",
				"tags": [
					"Company Customer"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "productId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "_id of a given organization",
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/company-customer/delete": {
			"post": {
				"operationId": "DeleteCompanyCustomer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Deletes company custoemr",
				"tags": [
					"Company Customer"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainCompanyCustomer"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/document/upload": {
			"post": {
				"operationId": "UploadFile",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Uploads a file. Returs file info.",
				"tags": [
					"Document"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/chain-api/data/document/download/{storageKey}": {
			"get": {
				"operationId": "GetFile",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Downloads the document (file) on the server identified by a storageKey.",
				"tags": [
					"Document"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "identifier of a file on server",
						"in": "path",
						"name": "storageKey",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/document-requirement/list": {
			"get": {
				"operationId": "ListDocumentRequirements",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainDocumentRequirement__"
								}
							}
						}
					}
				},
				"description": "Paginated list of document requirements.",
				"tags": [
					"Document requirements"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/document-requirement/{dbId}": {
			"get": {
				"operationId": "GetDocumentRequirement",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainDocumentRequirement_"
								}
							}
						}
					}
				},
				"description": "Fetches document requirement by its _id.",
				"tags": [
					"Document requirements"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "database _id of the document requirement",
						"in": "path",
						"name": "dbId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/document-requirement": {
			"post": {
				"operationId": "PostDocumentRequirement",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Inserts or updates a document requirement. When inserting fields _id, _rev and docType should not be present.",
				"tags": [
					"Document requirements"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainDocumentRequirement"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/document-requirement/delete": {
			"post": {
				"operationId": "DeleteDocumentRequirement",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Deletes document requirement.",
				"tags": [
					"Document requirements"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainDocumentRequirement"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/document-requirement-list/list": {
			"get": {
				"operationId": "ListDocumentRequirementLists",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainDocumentRequirementList__"
								}
							}
						}
					}
				},
				"description": "Paginated list of document requrement lists.",
				"tags": [
					"Document requirements"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/document-requirement-list/{dbId}": {
			"get": {
				"operationId": "GetDocumentRequirementList",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainDocumentRequirementList_"
								}
							}
						}
					}
				},
				"description": "Fetches document requirement by its _id.",
				"tags": [
					"Document requirements"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "database _id of the document requirement list",
						"in": "path",
						"name": "dbId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/document-requirement-list": {
			"post": {
				"operationId": "PostDocumentRequirementList",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Inserts or updates a document requirement. When inserting fields _id, _rev and docType should not be present.",
				"tags": [
					"Document requirements"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainDocumentRequirementList"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/document-requirement-list/list/semi-product/{semiProductId}": {
			"get": {
				"operationId": "ListDocumentRequirementListForSemiProduct",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainDocumentRequirementList__"
								}
							}
						}
					}
				},
				"description": "Paginated list of document requirement lists for semi-product.",
				"tags": [
					"Document requirements"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "semiProductId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/document-requirement-list/delete": {
			"post": {
				"operationId": "DeleteDocumentRequirementList",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Deletes semi-product.",
				"tags": [
					"Document requirements"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainDocumentRequirementList"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/facility/list": {
			"get": {
				"operationId": "ListFacilities",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainFacility__"
								}
							}
						}
					}
				},
				"description": "Paginated list of facilities.",
				"tags": [
					"Facility"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/facility/{dbId}": {
			"get": {
				"operationId": "GetFacilityById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainFacility_"
								}
							}
						}
					}
				},
				"description": "Fetches a facility by its _id.",
				"tags": [
					"Facility"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "dbId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/facility": {
			"post": {
				"operationId": "PostFacility",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Inserts or updates a facility. When inserting fields _id, _rev and docType should not be present.",
				"tags": [
					"Facility"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainFacility"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/facility/list/organization/{organizationId}": {
			"get": {
				"operationId": "ListFacilitiesForOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainFacility__"
								}
							}
						}
					}
				},
				"description": "Paginated list of facilities for a given organization",
				"tags": [
					"Facility"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "_id of a given organization",
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/facility/list/organization/{organizationId}/semi-product/{semiProductId}": {
			"get": {
				"operationId": "ListFacilitiesForOrganizationAndSemiProduct",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainFacility__"
								}
							}
						}
					}
				},
				"description": "Paginated list of facilities for a given organization and semiProductId",
				"tags": [
					"Facility"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "_id of a given organization",
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "_id of desired semi-product",
						"in": "path",
						"name": "semiProductId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/facility/list/organization/{organizationId}/semi-product/{semiProductId}/selling": {
			"get": {
				"operationId": "ListSellingFacilitiesForOrganizationAndSemiProduct",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainFacility__"
								}
							}
						}
					}
				},
				"description": "Paginated list of sellig facilities for a given organization and semiProductId",
				"tags": [
					"Facility"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "_id of a given organization",
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "_id of desired semi-product",
						"in": "path",
						"name": "semiProductId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/facility/list/collecting/organization/{organizationId}": {
			"get": {
				"operationId": "ListOfCollectingFacilitiesForOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainFacility__"
								}
							}
						}
					}
				},
				"description": "Paginated list of COLLECTING facilities for a given organization",
				"tags": [
					"Facility"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "_id of a given organization",
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/facility/delete": {
			"post": {
				"operationId": "DeleteFacility",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Deletes facility.",
				"tags": [
					"Facility"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainFacility"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/migrations/fix-quote-company-id": {
			"post": {
				"operationId": "FixQuoteCompanyId",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"tags": [
					"Migrations"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/chain-api/data/migrations/fix-all-stock-order-company-id": {
			"post": {
				"operationId": "FixAllStockOrderCompanyId",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"tags": [
					"Migrations"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/chain-api/data/order/facility/{facilityId}/list-open": {
			"get": {
				"operationId": "ListOpenOrdersForFacility",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainProductOrder__"
								}
							}
						}
					}
				},
				"tags": [
					"Order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "facilityId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "openOnly",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"in": "query",
						"name": "sortBy",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/order/organization/{organizationId}/list-open": {
			"get": {
				"operationId": "ListOpenOrdersForOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainProductOrder__"
								}
							}
						}
					}
				},
				"tags": [
					"Order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "openOnly",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"in": "query",
						"name": "sortBy",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/order/aggregates-for-order/{orderId}": {
			"get": {
				"operationId": "GetAggregatesForOrder",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ProcessingOrderHistory-Array_"
								}
							}
						}
					}
				},
				"tags": [
					"Order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "orderId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/order/quote-requrements-verify-for-order/{orderId}": {
			"get": {
				"operationId": "GetQuoteRequirementsVerification",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_QuoteRequirementConfirmationsWithMetaData_"
								}
							}
						}
					}
				},
				"tags": [
					"Order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "orderId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/order/{dbId}": {
			"get": {
				"operationId": "GetOrder",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainProductOrder_"
								}
							}
						}
					}
				},
				"description": "Fetches an order by its _id.",
				"tags": [
					"Order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "dbId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/order": {
			"post": {
				"operationId": "PostOrder",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Inserts or updates an order. When inserting fields _id, _rev and docType should not be present.",
				"tags": [
					"Order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainProductOrder"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/order/delete": {
			"post": {
				"operationId": "DeleteOrder",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Deletes order.",
				"tags": [
					"Order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainProductOrder"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/organization/list": {
			"get": {
				"operationId": "ListOrganizations",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainOrganization__"
								}
							}
						}
					}
				},
				"description": "Paginated list of organization.",
				"tags": [
					"Organization"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/organization/{dbId}": {
			"get": {
				"operationId": "GetOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainOrganization_"
								}
							}
						}
					}
				},
				"description": "Fetches organization by its _id.",
				"tags": [
					"Organization"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "database id of the organization",
						"in": "path",
						"name": "dbId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/organization/external/{linkId}": {
			"get": {
				"operationId": "GetOrganizationByCompanyId",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainOrganization_"
								}
							}
						}
					}
				},
				"description": "Returns organization according to external database id.",
				"tags": [
					"Organization"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "external database company id",
						"in": "path",
						"name": "linkId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/organization/company/list": {
			"post": {
				"operationId": "OrganizationsForIds",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Returns a list of organization matching to the list of external ids.\nWarning: Id lists and response list do not necessary match in length.\nif invalid external id is provided in the request's list the response list is shorter.",
				"tags": [
					"Organization"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "list of external ids",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/organization": {
			"post": {
				"operationId": "PostOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Inserts or updates organization. When inserting fields _id, _rev and docType should not be present.",
				"tags": [
					"Organization"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainOrganization"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/organization/delete": {
			"post": {
				"operationId": "DeleteOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Deletes organization.",
				"tags": [
					"Organization"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainOrganization"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/payment/bulk-payment/{dbId}": {
			"get": {
				"operationId": "GetBulkPayment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainBulkPayment_"
								}
							}
						}
					}
				},
				"description": "Fetches a bulk payment by its _id.",
				"tags": [
					"Payments"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "database id of the bulk payment",
						"in": "path",
						"name": "dbId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/payment/bulk-payment": {
			"post": {
				"operationId": "PostBulkPayment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Inserts or updates a bulk payment. When inserting fields _id, _rev and docType should not be present.",
				"tags": [
					"Payments"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainBulkPayment"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/payment/bulk-payment/list/organization/{payingOrganizationId}": {
			"get": {
				"operationId": "ListBulkPaymentsForPayingOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainBulkPayment__"
								}
							}
						}
					}
				},
				"description": "Returns paginated list of bulk payments for payingOrganization",
				"tags": [
					"Payments"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "payingOrganizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/payment/delete": {
			"post": {
				"operationId": "DeleteBulkPayment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Deletes payment",
				"tags": [
					"Payments"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainBulkPayment"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/payment/{dbId}": {
			"get": {
				"operationId": "GetPayment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainPayment_"
								}
							}
						}
					}
				},
				"description": "Fetches a payment by its _id.",
				"tags": [
					"Payments"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "database id of the payment",
						"in": "path",
						"name": "dbId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/payment": {
			"post": {
				"operationId": "PostPayment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Inserts or updates a payment. When inserting fields _id, _rev and docType should not be present.",
				"tags": [
					"Payments"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainPayment"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/payment/delete-payment": {
			"post": {
				"operationId": "DeletePayment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Deletes payment",
				"tags": [
					"Payments"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainPayment"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/payment/list/organization/{payingOrganizationId}": {
			"get": {
				"operationId": "ListPaymentsForPayingOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainPayment__"
								}
							}
						}
					}
				},
				"description": "Paginated list of payments",
				"tags": [
					"Payments"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "payingOrganizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "query by receiptNumber",
						"in": "query",
						"name": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "PAYMENT_DATE or DELIVERY_DATE",
						"in": "query",
						"name": "sortBy",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"PAYMENT_DATE",
								"DELIVERY_DATE"
							]
						}
					},
					{
						"description": "CONFIRMED or UNCONFIRMED",
						"in": "query",
						"name": "paymentStatus",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"CONFIRMED",
								"UNCONFIRMED"
							]
						}
					},
					{
						"description": "CASH_VIA_COOPERATIVE or CASH_VIA_COLLECTOR or BANK_TRANSFER or UNKNOWN",
						"in": "query",
						"name": "wayOfPayment",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"CASH_VIA_COOPERATIVE",
								"CASH_VIA_COLLECTOR",
								"BANK_TRANSFER",
								"UNKNOWN"
							]
						}
					},
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "deliveryDateStart",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "deliveryDateEnd",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/payment/list/stock-order/{stockOrderId}": {
			"get": {
				"operationId": "ListPaymentsForStockOrder",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainPayment__"
								}
							}
						}
					}
				},
				"description": "Paginated list of payments for a given stock order",
				"tags": [
					"Payments"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "_id of a given organization",
						"in": "path",
						"name": "stockOrderId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/payment/list/farmer/{farmerId}": {
			"get": {
				"operationId": "ListPaymentsForRecipientUserCustomer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainPayment__"
								}
							}
						}
					}
				},
				"description": "Paginated list of payments for a user customer",
				"tags": [
					"Payments"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "farmerId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/payment/list/bank-transfer/{bankTransferId}": {
			"get": {
				"operationId": "ListPaymentsForBankTransfer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainPayment__"
								}
							}
						}
					}
				},
				"description": "Paginated list of payments for a given",
				"tags": [
					"Payments"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "bankTransferId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/payment/confirm-payment": {
			"post": {
				"operationId": "ConfirmPayment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Confirm payment",
				"tags": [
					"Payments"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainPayment"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/processing-action/{dbId}": {
			"get": {
				"operationId": "GetProcessingAction",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainProcessingAction_"
								}
							}
						}
					}
				},
				"description": "Fetches processing action by its _id.",
				"tags": [
					"Processing action"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "database _id of the product",
						"in": "path",
						"name": "dbId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/processing-action": {
			"post": {
				"operationId": "PostProcessingAction",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Inserts or updates a processing action. When inserting fields _id, _rev and docType should not be present.",
				"tags": [
					"Processing action"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainProcessingAction"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/processing-action/list/product/{productId}/organization/{organizationId}": {
			"get": {
				"operationId": "ListProcessingActionsForProductAndOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainProcessingAction__"
								}
							}
						}
					}
				},
				"description": "Paginated list of processing action for product.",
				"tags": [
					"Processing action"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "productId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "skuOnly",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/processing-action/delete": {
			"post": {
				"operationId": "DeleteProcessingAction",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Deletes semi-product.",
				"tags": [
					"Processing action"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainProcessingAction"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/product/list": {
			"get": {
				"operationId": "ListProducts",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainProduct__"
								}
							}
						}
					}
				},
				"description": "Paginated list of product.",
				"tags": [
					"Product"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/product/list/organization/{organizationId}": {
			"get": {
				"operationId": "ListProductsForOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainProduct__"
								}
							}
						}
					}
				},
				"description": "Paginated list of products for organization.",
				"tags": [
					"Product"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/product/{dbId}": {
			"get": {
				"operationId": "GetProduct",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainProduct_"
								}
							}
						}
					}
				},
				"description": "Fetches product by its _id.",
				"tags": [
					"Product"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "database _id of the product",
						"in": "path",
						"name": "dbId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/product/external/{linkId}": {
			"get": {
				"operationId": "GetProductByAFId",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainProduct_"
								}
							}
						}
					}
				},
				"description": "Returns product according to external database id.",
				"tags": [
					"Product"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "external database product id",
						"in": "path",
						"name": "linkId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/product/external/list": {
			"post": {
				"operationId": "ProductsForIds",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Returns a list of products matching to the list of external ids.\nWarning: Id lists and response list do not necessary match in length.\nif invalid external id is provided in the request's list the response list is shorter.",
				"tags": [
					"Product"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "list of external ids",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/product": {
			"post": {
				"operationId": "PostProduct",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Inserts or updates product. When inserting fields _id, _rev and docType should not be present.",
				"tags": [
					"Product"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainProduct"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/product/delete": {
			"post": {
				"operationId": "DeleteProduct",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Deletes product.",
				"tags": [
					"Product"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainProduct"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/public/aggregates/{stockOrderId}": {
			"get": {
				"operationId": "GetAggregatesForStockOrder",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_B2CHistoryTimeline_"
								}
							}
						}
					}
				},
				"description": "Returns aggregates for stock order",
				"tags": [
					"Public"
				],
				"security": [],
				"parameters": [
					{
						"description": "stock order dbID",
						"in": "path",
						"name": "stockOrderId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/public/b2c/{stockOrderId}": {
			"get": {
				"operationId": "GetB2CDataForStockOrder",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Returns B2C relevant data for stock order",
				"tags": [
					"Public"
				],
				"security": [],
				"parameters": [
					{
						"description": "stock order dbID",
						"in": "path",
						"name": "stockOrderId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "orderId",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "cooperative",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "cuppingGrade",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					}
				]
			}
		},
		"/chain-api/data/semi-product/list": {
			"get": {
				"operationId": "ListSemiProducts",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainSemiProduct__"
								}
							}
						}
					}
				},
				"description": "Paginated list of semi products.",
				"tags": [
					"Semi product"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/semi-product/{dbId}": {
			"get": {
				"operationId": "GetSemiProduct",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainSemiProduct_"
								}
							}
						}
					}
				},
				"description": "Fetches semi product by its _id.",
				"tags": [
					"Semi product"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "database _id of the product",
						"in": "path",
						"name": "dbId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/semi-product": {
			"post": {
				"operationId": "PostSemiProduct",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Inserts or updates a semi product. When inserting fields _id, _rev and docType should not be present.",
				"tags": [
					"Semi product"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainSemiProduct"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/semi-product/list/product/{productId}": {
			"get": {
				"operationId": "ListSemiProductsForProduct",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainSemiProduct__"
								}
							}
						}
					}
				},
				"description": "Paginated list of semi-products for product.",
				"tags": [
					"Semi product"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "productId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "isBuyable",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"description": "(at producer)",
						"in": "query",
						"name": "isSKU",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"description": "(at end customer)",
						"in": "query",
						"name": "isSKUEndCustomer",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/semi-product/delete": {
			"post": {
				"operationId": "DeleteSemiProduct",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Deletes semi-product.",
				"tags": [
					"Semi product"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainSemiProduct"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/stock-order/facility/{facilityId}/all": {
			"get": {
				"operationId": "ListStockForFacility",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainStockOrder__"
								}
							}
						}
					}
				},
				"description": "Returns a paginated list of all stock orders in a given facility",
				"tags": [
					"Stock order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "_id of a given facility",
						"in": "path",
						"name": "facilityId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "show purhcase orders with open balance",
						"in": "query",
						"name": "showPurchaseOrderOpenBalanceOnly",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"description": "show only purchase orders",
						"in": "query",
						"name": "purchaseOrderOnly",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "availableOnly",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "semiProductId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "CASH_VIA_COOPERATIVE or CASH_VIA_COLLECTOR or BANK_TRANSFER or UNKNOWN",
						"in": "query",
						"name": "wayOfPayment",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"CASH_VIA_COOPERATIVE",
								"CASH_VIA_COLLECTOR",
								"BANK_TRANSFER",
								"UNKNOWN"
							]
						}
					},
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"in": "query",
						"name": "sortBy",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "womensCoffee",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "productionDateStart",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "productionDateEnd",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "by farmer name or surname",
						"in": "query",
						"name": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/stock-order/organization/{organizationId}/all": {
			"get": {
				"operationId": "ListStockOrdersForOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainStockOrder__"
								}
							}
						}
					}
				},
				"description": "Returns a list of all stock orders for organizationId",
				"tags": [
					"Stock order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "organizationId",
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "show purhcase orders with open balance",
						"in": "query",
						"name": "showPurchaseOrderOpenBalanceOnly",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"description": "show only purchase orders",
						"in": "query",
						"name": "purchaseOrderOnly",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"in": "query",
						"name": "farmerId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "CASH_VIA_COOPERATIVE or CASH_VIA_COLLECTOR or BANK_TRANSFER or UNKNOWN",
						"in": "query",
						"name": "wayOfPayment",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"CASH_VIA_COOPERATIVE",
								"CASH_VIA_COLLECTOR",
								"BANK_TRANSFER",
								"UNKNOWN"
							]
						}
					},
					{
						"in": "query",
						"name": "womensCoffee",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "productionDateStart",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "productionDateEnd",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "by farmer name or surname",
						"in": "query",
						"name": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/stock-order/facility/{facilityOrOrganizationId}/orders-for-customers": {
			"get": {
				"operationId": "ListStockInFacilityForCustomers",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainStockOrder__"
								}
							}
						}
					}
				},
				"description": "Lists stock orders in facility filtered optionaly by specific customer and possibly only open",
				"tags": [
					"Stock order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "facilityOrOrganizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "companyCustomerId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "openOnly",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "mode",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"facility",
								"organization"
							]
						}
					},
					{
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"in": "query",
						"name": "sortBy",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/stock-order/all": {
			"get": {
				"operationId": "ListStockOrders",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainStockOrder__"
								}
							}
						}
					}
				},
				"description": "Returns a paginated list of all stock orders",
				"tags": [
					"Stock order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "show purhcase orders with open balance",
						"in": "query",
						"name": "showPurchaseOrderOpenBalanceOnly",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"description": "show only purchase orders",
						"in": "query",
						"name": "purchaseOrderOnly",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/stock-order/farmer/{farmerId}/purchase-orders": {
			"get": {
				"operationId": "ListPurchaseOrderForUserCustomer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainStockOrder__"
								}
							}
						}
					}
				},
				"description": "Returns a paginated list of all stock orders",
				"tags": [
					"Stock order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "userCustomerId",
						"in": "path",
						"name": "farmerId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "showOpenBalanceOnly",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/stock-order/availability/facility/{facilityId}/semi-product/{semiProductId}": {
			"get": {
				"operationId": "AvailableQuantityOfSemiProductInFacility",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainSemiProductAvailability_"
								}
							}
						}
					}
				},
				"description": "Lists semi-product availability in a facility",
				"tags": [
					"Stock order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "facilityId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "semiProductId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/stock-order/availability": {
			"post": {
				"operationId": "AvailableQuantityOfSemiProductInFacilities",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainSemiProductAvailability-Array_"
								}
							}
						}
					}
				},
				"tags": [
					"Stock order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AvailabilityInFacilitiesRequest"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/stock-order/facility/{facilityId}/available": {
			"get": {
				"operationId": "ListAvailableStockForFacility",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainStockOrder__"
								}
							}
						}
					}
				},
				"description": "Returns a paginated list of stock orders in a given facility",
				"tags": [
					"Stock order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "_id of a given facility",
						"in": "path",
						"name": "facilityId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/stock-order/facility/{facilityId}/semi-product/{semiProductId}/available": {
			"get": {
				"operationId": "ListAvailableStockForSemiProductInFacility",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainStockOrder__"
								}
							}
						}
					}
				},
				"description": "Returns a paginated list of stock orders with certain semi-product id in a given facility",
				"tags": [
					"Stock order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "_id of a given facility",
						"in": "path",
						"name": "facilityId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "_id of a desired semi-product",
						"in": "path",
						"name": "semiProductId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "womensCoffee",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "productionDateStart",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "productionDateEnd",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/stock-order/{dbId}": {
			"get": {
				"operationId": "GetStockOrderById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainStockOrder_"
								}
							}
						}
					}
				},
				"description": "Fetches a stock order by its _id.",
				"tags": [
					"Stock order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "dbId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/stock-order/{dbId}/with-input-orders": {
			"get": {
				"operationId": "GetStockOrderByIdWithInputOrders",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainStockOrder_"
								}
							}
						}
					}
				},
				"description": "Fetches a stock order by its _id.",
				"tags": [
					"Stock order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "dbId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/stock-order": {
			"post": {
				"operationId": "PostStockOrder",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Inserts or updates a stock order. When inserting fields _id, _rev and docType should not be present.",
				"tags": [
					"Stock order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainStockOrder"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/stock-order/delete": {
			"post": {
				"operationId": "DeleteStockOrder",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Deletes stock order.",
				"tags": [
					"Stock order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainStockOrder"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/stock-order/delete-stock-orders": {
			"post": {
				"operationId": "DeleteStockOrders",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Deletes stock orders.",
				"tags": [
					"Stock order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"items": {
									"$ref": "#/components/schemas/ChainStockOrder"
								},
								"type": "array"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/stock-order/aggregates/{stockOrderId}": {
			"get": {
				"operationId": "GetAggregatesForStockOrder",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ProcessingOrderHistory-Array_"
								}
							}
						}
					}
				},
				"description": "Returns aggregates for stock order",
				"tags": [
					"Stock order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "stock order dbID",
						"in": "path",
						"name": "stockOrderId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/stock-order/b2c/{stockOrderId}": {
			"get": {
				"operationId": "GetB2CDataForStockOrder",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Returns B2C relevant data for stock order",
				"tags": [
					"Stock order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "stock order dbID",
						"in": "path",
						"name": "stockOrderId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "orderId",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "cooperative",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "cuppingGrade",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					}
				]
			}
		},
		"/chain-api/data/stock-order/seasonalStatistics/{organizationId}": {
			"get": {
				"operationId": "GetSeasonalStatisticsForOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Returns seasonal statistics",
				"tags": [
					"Stock order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "stock order dbID",
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "fromDate",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "toDate",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "specificOrder",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/stock-order/facility/{facilityOrOrganizationId}/list-quotes": {
			"get": {
				"operationId": "ListQuoteOrders",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainStockOrder__"
								}
							}
						}
					}
				},
				"tags": [
					"Stock order"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "facilityOrOrganizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "openOnly",
						"required": true,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "semiProductId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "mode",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"facility",
								"organization"
							]
						}
					},
					{
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"in": "query",
						"name": "sortBy",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "productionDateStart",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "productionDateEnd",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/system/create-indices": {
			"get": {
				"operationId": "CreateIndices",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"tags": [
					"System"
				],
				"security": [
					{
						"jwt": [
							"ADMIN"
						]
					}
				],
				"parameters": []
			}
		},
		"/chain-api/system/initialize": {
			"get": {
				"operationId": "Initialize",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"tags": [
					"System"
				],
				"security": [
					{
						"jwt": [
							"ADMIN"
						]
					}
				],
				"parameters": []
			}
		},
		"/chain-api/system/blockchain-initialize": {
			"get": {
				"operationId": "InitializeBlockchain",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"tags": [
					"System"
				],
				"security": [
					{
						"jwt": [
							"ADMIN"
						]
					}
				],
				"parameters": []
			}
		},
		"/chain-api/system/blockchain-test": {
			"get": {
				"operationId": "TestBlockchain",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"tags": [
					"System"
				],
				"security": [
					{
						"jwt": [
							"ADMIN"
						]
					}
				],
				"parameters": []
			}
		},
		"/chain-api/system/check-connection/{date}": {
			"get": {
				"operationId": "CheckConnection",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"tags": [
					"System"
				],
				"security": [
					{
						"jwt": [
							"ADMIN"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "date",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/system/test": {
			"get": {
				"operationId": "Test",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"tags": [
					"System"
				],
				"security": [
					{
						"jwt": [
							"ADMIN"
						]
					}
				],
				"parameters": []
			}
		},
		"/chain-api/system/bc-organization-test": {
			"post": {
				"operationId": "PostOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"tags": [
					"System"
				],
				"security": [
					{
						"jwt": [
							"ADMIN"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainOrganization"
							}
						}
					}
				}
			}
		},
		"/chain-api/system/bc-organization-test/{dbId}": {
			"get": {
				"operationId": "GetOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainOrganization_"
								}
							}
						}
					}
				},
				"tags": [
					"System"
				],
				"security": [
					{
						"jwt": [
							"ADMIN"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "dbId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/system/copy-db": {
			"get": {
				"operationId": "CopyDB",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"tags": [
					"System"
				],
				"security": [
					{
						"jwt": [
							"ADMIN"
						]
					}
				],
				"parameters": []
			}
		},
		"/chain-api/data/transaction/query": {
			"get": {
				"operationId": "ListTransactionQuery",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainTransaction__"
								}
							}
						}
					}
				},
				"description": "Returns a paginated list of all transactions subject to search parameters",
				"tags": [
					"Transaction"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "sourceFacilityId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "targetFacilityId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "semiProductId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "startDate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "endDate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "query by identifier",
						"in": "query",
						"name": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/transaction/{dbId}": {
			"get": {
				"operationId": "GetTransactionById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainTransaction_"
								}
							}
						}
					}
				},
				"description": "Fetches a transaction by its _id.",
				"tags": [
					"Transaction"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "dbId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/transaction": {
			"post": {
				"operationId": "PostTransaction",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Inserts or updates a transaction. When inserting fields _id, _rev and docType should not be present.",
				"tags": [
					"Transaction"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainTransaction"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/transaction/stock-orders-with-inputs": {
			"post": {
				"operationId": "PostStockOrdersWithInputTransactions",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Inserts or updates a list of stock orders with input transactions.",
				"tags": [
					"Transaction"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainStockOrder"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/transaction/processing-orders-with-inputs-and-outputs": {
			"post": {
				"operationId": "PostProcessingOrdersWithInputTransactionsAndOutputStockOrders",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Inserts or updates a list of processing orders with input transactions and output orders",
				"tags": [
					"Transaction"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"items": {
									"$ref": "#/components/schemas/ChainProcessingOrder"
								},
								"type": "array"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/transaction/input/{stockOrderId}": {
			"get": {
				"operationId": "ListInputTransactionsForProductUnitId",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainTransaction__"
								}
							}
						}
					}
				},
				"description": "Paginated list of input transactions for a stock order.",
				"tags": [
					"Transaction"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "stockOrderId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/transaction/output/{stockOrderId}": {
			"get": {
				"operationId": "ListOutputTransactionsForProductUnitId",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainTransaction__"
								}
							}
						}
					}
				},
				"description": "Paginated list of output transactions for a stock order.",
				"tags": [
					"Transaction"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "stockOrderId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/transaction/list/organization/{organizationId}": {
			"get": {
				"operationId": "ListTransactionsForOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainTransaction__"
								}
							}
						}
					}
				},
				"description": "Paginated list of transactions for a given organization",
				"tags": [
					"Transaction"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "_id of a given organization",
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/transaction/delete": {
			"post": {
				"operationId": "DeleteTransaction",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Deletes transaction",
				"tags": [
					"Transaction"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainTransaction"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/transaction/delete-transactions": {
			"post": {
				"operationId": "DeleteTransactions",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Deletes transactions orders.",
				"tags": [
					"Transaction"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"items": {
									"$ref": "#/components/schemas/ChainTransaction"
								},
								"type": "array"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/transaction/cancel-transactions/{transactionId}": {
			"post": {
				"operationId": "CancelTransactions",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Cancel transaction",
				"tags": [
					"Transaction"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "transactionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "rejection",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/transaction/approve-transactions/{transactionId}": {
			"post": {
				"operationId": "ApproveTransactions",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Approve transaction",
				"tags": [
					"Transaction"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "transactionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/user/list": {
			"get": {
				"operationId": "ListUsers",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainUser__"
								}
							}
						}
					}
				},
				"description": "Paginated list of users.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/user/{dbId}": {
			"get": {
				"operationId": "GetUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainUser_"
								}
							}
						}
					}
				},
				"description": "Fetches user by its _id.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "database id of the product",
						"in": "path",
						"name": "dbId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/user/external/list": {
			"post": {
				"operationId": "UsersForIds",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Returns a list of users matching to the list of external ids.\nWarning: Id lists and response list do not necessary match in length.\nif invalid external id is provided in the request's list the response list is shorter.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "list of external ids",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/user/external/{linkId}": {
			"get": {
				"operationId": "GetUserByAFId",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainUser_"
								}
							}
						}
					}
				},
				"description": "Returns user according to external database id.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "external database product id",
						"in": "path",
						"name": "linkId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/user": {
			"post": {
				"operationId": "PostUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Inserts or updates a user. When inserting fields _id, _rev and docType should not be present.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainUser"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/user-customer/list": {
			"get": {
				"operationId": "ListUserCustomers",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainUserCustomer__"
								}
							}
						}
					}
				},
				"description": "Paginated list of user customer.",
				"tags": [
					"User Customer"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/user-customer/{dbId}": {
			"get": {
				"operationId": "GetUserCustomer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainUserCustomer_"
								}
							}
						}
					}
				},
				"description": "Fetches user customer by its _id.",
				"tags": [
					"User Customer"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "database id of the product",
						"in": "path",
						"name": "dbId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/user-customer/external/list": {
			"post": {
				"operationId": "UserCustomersForIds",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainUserCustomer-Array_"
								}
							}
						}
					}
				},
				"description": "Returns a list of user customers matching to the list of external ids.\nWarning: Id lists and response list do not necessary match in length.\nif invalid external id is provided in the request's list the response list is shorter.",
				"tags": [
					"User Customer"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "list of external ids",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/user-customer/external/{linkId}": {
			"get": {
				"operationId": "GetUserCustomerByAFId",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChainUserCustomer_"
								}
							}
						}
					}
				},
				"description": "Returns user customer according to external database id.",
				"tags": [
					"User Customer"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "external database product id",
						"in": "path",
						"name": "linkId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/user-customer": {
			"post": {
				"operationId": "PostUserCustomer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Inserts or updates a user customer. When inserting fields _id, _rev and docType should not be present.",
				"tags": [
					"User Customer"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainUserCustomer"
							}
						}
					}
				}
			}
		},
		"/chain-api/data/user-customer/list/organization/{organizationId}": {
			"get": {
				"operationId": "ListUserCustomersForOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainUserCustomer__"
								}
							}
						}
					}
				},
				"description": "Paginated list of user customers for a given organization",
				"tags": [
					"User Customer"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "_id of a given organization",
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "query by name",
						"in": "query",
						"name": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/user-customer/list/role/{role}": {
			"get": {
				"operationId": "ListUserCustomersByRole",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainUserCustomer__"
								}
							}
						}
					}
				},
				"description": "Paginated list of user customers for a given organization",
				"tags": [
					"User Customer"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "desire role (FARMER or COLLECTOR)",
						"in": "path",
						"name": "role",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "query by name",
						"in": "query",
						"name": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/user-customer/list/organization/{organizationId}/role/{role}": {
			"get": {
				"operationId": "ListUserCustomersForOrganizationAndRole",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainUserCustomer__"
								}
							}
						}
					}
				},
				"description": "Paginated list of user customers for a given organization and role",
				"tags": [
					"User Customer"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "_id of a given organization",
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "desired user customer role (FARMER or COLLECTOR)",
						"in": "path",
						"name": "role",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "query by name",
						"in": "query",
						"name": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "queryBy",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"BY_NAME",
								"BY_SURNAME",
								"BY_USER_CUSTOMER_ID",
								"ALL"
							]
						}
					},
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/user-customer/list/product/{productId}/organization/{organizationId}": {
			"get": {
				"operationId": "ListUserCustomersForProductAndOrganization",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainUserCustomer__"
								}
							}
						}
					}
				},
				"description": "Paginated list of user customers for a given organization",
				"tags": [
					"User Customer"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "productId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "_id of a given organization",
						"in": "path",
						"name": "organizationId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "sort order ASC or DESC",
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"description": "query limit",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "query offset",
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/chain-api/data/user-customer/list/stock-orders/{userCustomerId}": {
			"get": {
				"operationId": "ListStockOrdersForUserCustomer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainStockOrder__"
								}
							}
						}
					}
				},
				"description": "Paginated list of purchase orders (stock ordrs) for a given user customer",
				"tags": [
					"User Customer"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "userCustomerId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "startDate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "endDate",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/user-customer/list/payments/{userCustomerId}": {
			"get": {
				"operationId": "ListPaymentsorUserCustomer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_PaginatedList_ChainPayment__"
								}
							}
						}
					}
				},
				"description": "Paginated list of payments for a given user customer",
				"tags": [
					"User Customer"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "userCustomerId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "startDate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "endDate",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/chain-api/data/user-customer/delete": {
			"post": {
				"operationId": "DeleteUserCustomer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"description": "Deletes user custoemr",
				"tags": [
					"User Customer"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainUserCustomer"
							}
						}
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}